lik.anc$node <- c(1:length(phylo_tree$tip.label), (length(phylo_tree$tip.label) + 1):(phylo_tree$Nnode + length(phylo_tree$tip.label)))
#plot the ancestral reconstruction, displaying each of the three trait states (cathemeral, diurnal, nocturnal)
ancestral_plot <- ggtree(phylo_tree, layout = "circular") %<+% lik.anc + aes(color = present) + geom_tippoint(aes(color = present), shape = 16, size = 1) + scale_color_distiller(name = "SV presence", palette = "RdYlGn", direction = 1)  + geom_tiplab(color = "black", size = 1.5, offset = 0.5) + geom_tippoint(aes(color = present), shape = 16, size = 1.5)
#ancestral_plot <- ancestral_plot + geom_tiplab(hjust = -0.2, size = 1.5)
ancestral_plot
#plot the ancestral reconstruction, displaying each of the three trait states (cathemeral, diurnal, nocturnal)
ancestral_plot <- ggtree(phylo_tree, layout = "circular") %<+% lik.anc +
aes(color = present) + geom_tippoint(aes(color = present), shape = 16, size = 1) + scale_color_distiller(name = "SV presence", palette = "RdYlGn", direction = 1)  + geom_tiplab(color = "black", size = 1.5, offset = 0.5) + geom_tippoint(aes(color = present), shape = 16, size = 1.5)
#plot the ancestral reconstruction, displaying each of the three trait states (cathemeral, diurnal, nocturnal)
ancestral_plot <- ggtree(phylo_tree, layout = "circular") %<+% lik.anc +
aes(color = present) + geom_tippoint(aes(color = present), shape = 16, size = 1) +
scale_color_distiller(name = "SV presence", palette = "RdYlGn", direction = 1)  +
geom_tiplab(color = "black", size = 1.5, offset = 0.5) +
geom_tippoint(aes(color = present), shape = 16, size = 1.5)
#ancestral_plot <- ancestral_plot + geom_tiplab(hjust = -0.2, size = 1.5)
ancestral_plot
View(phylo_tree)
View(phylo_tree)
View(lik.anc)
View(lik.anc)
View(lik.anc)
lik.anc$species <- lik.anc[]
lik.anc <- as.data.frame(rbind(model_results$tip.states, model_results$states))
lik.anc$species <- rownames(lik.anc)
View(lik.anc)
#plot the ancestral reconstruction, displaying each of the three trait states (cathemeral, diurnal, nocturnal)
ancestral_plot <- ggtree(phylo_tree, layout = "circular") %<+% lik.anc +
aes(color = present) + geom_tippoint(aes(color = present), shape = 16, size = 1) +
scale_color_distiller(name = "SV presence", palette = "RdYlGn", direction = 1)  +
geom_tiplab(color = "black", size = 1.5, offset = 0.5) +
geom_tippoint(aes(color = present), shape = 16, size = 1.5)
#ancestral_plot <- ancestral_plot + geom_tiplab(hjust = -0.2, size = 1.5)
ancestral_plot
lik.anc <- as.data.frame(rbind(model_results$tip.states, model_results$states))
colnames(lik.anc) <- c("absent", "present")
phylo_tree <- model_results$phy
lik.anc$node <- c(1:length(phylo_tree$tip.label), (length(phylo_tree$tip.label) + 1):(phylo_tree$Nnode + length(phylo_tree$tip.label)))
#plot the ancestral reconstruction, displaying each of the three trait states (cathemeral, diurnal, nocturnal)
ancestral_plot <- ggtree(phylo_tree, layout = "circular") %<+% lik.anc +
aes(color = present) + geom_tippoint(aes(color = present), shape = 16, size = 1) +
scale_color_distiller(name = "SV presence", palette = "RdYlGn", direction = 1)  +
geom_tiplab(color = "black", size = 1.5, offset = 0.5) +
geom_tippoint(aes(color = present), shape = 16, size = 1.5)
#ancestral_plot <- ancestral_plot + geom_tiplab(hjust = -0.2, size = 1.5)
ancestral_plot
lik.anc$species <- rownames(lik.anc)
ancestral_plot <- ggtree(phylo_tree, layout = "circular") %<+% lik.anc +
aes(color = present) + geom_tippoint(aes(color = present), shape = 16, size = 1) +
scale_color_distiller(name = "SV presence", palette = "RdYlGn", direction = 1)  +
geom_tiplab(color = "black", size = 1.5, offset = 0.5) +
geom_tippoint(aes(color = present), shape = 16, size = 1.5)
ancestral_plot
lik.anc <- merge(lik.anc, SV_data_avg)
lik.anc <- as.data.frame(rbind(model_results$tip.states, model_results$states))
lik.anc <- merge(lik.anc, SV_data_avg, all.x = TRUE)
lik.anc <- as.data.frame(rbind(model_results$tip.states, model_results$states))
# # Adding orders and removing species names ------------------------------------
tr <- readRDS("/Users/juliamaja/Desktop/SV/tr_tree_calibrated_8_25.rds") # my tree
SV_data <- SV_data_avg
tr <- tol_induced_subtree(ott_ids = SV_data$ott_id[SV_data$flags %in% c("sibling_higher", "")], label_format = "id")
tr <- multi2di(tr)
tr$tip.label <- SV_data$tips[match(tr$tip.label, paste("ott", SV_data$ott_id, sep = ""))]
ggtree(tr, layout = "circular") + geom_tiplab(color = "black", size = 1.5)
sv_palette <- c("oldlace", "#FEEBE2", "#FBB4B9", "#F768A1", "#C51B8A", "#7A0177", "slateblue")
sv.plot <- ggtree(tr, layout = "circular") %<+% SV_data[, c("tips", "presence", "genome.assembly")]
sv.plot <- sv.plot + geom_tile(data = sv.plot$data[1:length(tr$tip.label),], aes(y=y, x=x, fill = presence), inherit.aes = FALSE, color = "transparent") + scale_fill_brewer(palette = "RdPu")
#sv.plot <- sv.plot + geom_tile(data = sv.plot$data[1:length(tr$tip.label),], aes(y=y, x=x+15, fill = genome.assembly), inherit.aes = FALSE, color = "transparent") + scale_fill_manual(values = sv_palette)
sv.plot <- sv.plot + geom_tiplab(hjust = -0.2, size = 1.5)
sv.plot
findMRCANode2 <- function(phylo = tr, trait.data = trait.data, taxonomic_level_col = 3, taxonomic_level_name = "Araneae"){
nodes_list <- list()
trait.data <- trait.data %>% group_by_at(taxonomic_level_col) %>% filter(n()>1)
trait.data.filtered <- trait.data[trait.data[,taxonomic_level_col] == taxonomic_level_name, ]
tip_vector <- as.vector(trait.data.filtered[, "tips"])
#find the node number of the MRCA of these species
MRCA_node <- findMRCA(phylo, tip_vector$tips)
node_df <- data.frame(clade_name = taxonomic_level_name, node_number = MRCA_node)
return(node_df)
}
View(SV_data_avg)
findMRCANode2(tr)
View(SV_data_avg)
findMRCANode2(tr, SV_data_avg, 3, "Perciformes")
trait.data <- SV_data_avg
trait.data %>% group_by_at(taxonomic_level_col) %>% filter(n()>1)
taxonomic_level_col <- 3
trait.data %>% group_by_at(taxonomic_level_col) %>% filter(n()>1)
taxonomic_level_name <- "Perciformes"
trait.data[trait.data[,taxonomic_level_col] == taxonomic_level_name, ]
trait.data <- trait.data %>% group_by_at(taxonomic_level_col) %>% filter(n()>1)
trait.data.filtered <- trait.data[trait.data[,taxonomic_level_col] == taxonomic_level_name, ]
# order labels ------------------------------------------------------------
library(phytools)
findMRCANode2(tr, SV_data_avg, 3, "Perciformes")
tip_vector <- as.vector(trait.data.filtered[, "tips"])
tip_vector
str(tr)
MRCA_node <- findMRCA(phylo, tip_vector$tips)
phylo <- tr
MRCA_node <- findMRCA(phylo, tip_vector$tips)
?findMRCA
findMRCA(tr, c("Sebastes_oblongus", "Sander_vitreus"))
findMRCANode2(tr, SV_data_avg, 3, "Gobiiformes")
nodes_df <- findMRCANode2(tr, SV_data_avg, 3, "Gobiiformes")
nodes_df
diel.plot <- ggtree(tr, layout = "circular")
diel.plot
diel.plot <- ggtree(tr, layout = "circular")
diel.plot <- ggtree(tr, layout = "circular")
diel.plot <- diel.plot + geom_cladelab(node = nodes_df$node_number, label = nodes_df$clade_name, offset=1.5, offset.text=2, barsize=2, fontsize=3, barcolour = "grey50", textcolour = "black")
diel.plot
#label major families
orders <- SV_data_avg %>% count(Orders) %>% filter(n>1) #filter for clades with more than one species or it can't find the MRCA
#label major families
orders <- SV_data_avg %>% count(orders) %>% filter(n>1) #filter for clades with more than one species or it can't find the MRCA
View(SV_data_avg)
#label major families
orders <- SV_data_avg %>% count(Order) %>% filter(n>1) #filter for clades with more than one species or it can't find the MRCA
orders
nodes_list <- list()
for(i in orders$Order){
node_df <- findMRCANode2(phylo = trpy_n, trait.data = trait.data, taxonomic_level_col = 3, taxonomic_level_name = i)
nodes_list[[i]] <- node_df
nodes_df <- do.call(rbind, nodes_list)
}
nodes_list <- list()
for(i in orders$Order){
node_df <- findMRCANode2(phylo = tr, trait.data = SV_data_avg, taxonomic_level_col = 3, taxonomic_level_name = i)
nodes_list[[i]] <- node_df
nodes_df <- do.call(rbind, nodes_list)
}
for(i in orders$Order){
print(i)
#   node_df <- findMRCANode2(phylo = tr, trait.data = SV_data_avg, taxonomic_level_col = 3, taxonomic_level_name = i)
#   nodes_list[[i]] <- node_df
#   nodes_df <- do.call(rbind, nodes_list)
}
nodes_df
View(SV_data_avg)
library(ape)
library(corHMM)
library(phangorn)
library(stringr)
library(here)
library(rotl)
library(ggtree)
library(gsheet)
library(dplyr)
library(phytools)
library(geiger)
library(ggplot2)
library(rphylopic)
library(RColorBrewer)
library(ggimage)
library(rfishbase)
library(rentrez)
library(taxize)
library(rotl)
library(ggtree)
library(stringr)
library(scales)
library(gsheet)
library(ape)
library(patchwork)
library(ggpubr)
#library(xlsx) # problem
library(geiger)
library(here)
library(ggtree)
library(randomcoloR)
library(ggnewscale)
library(svglite)
library(Polychrome)
library(rphylopic)
# tr <- readRDS("/Users/juliamaja/Downloads/tr_tree_calibrated_fish.rds")
tr <- readRDS("/Users/juliamaja/Desktop/SV/julia_fish_tree.rds")
P50 = c("#483d8b", "#3cb371", "#bc8f8f", "#bdb76b", "#008b8b", "#4682b4", "#d2691e",
"#F8C471", "#cd5c5c", "#00008b", "#32cd32", "#daa520", "#8fbc8f", "#8b008b",
"#9932cc", "#ff4500", "#ff8c00", "#ffd700", "#F9E79F", "#244fa4", "#BCBD22",
"#00fa9a", "#dc143c", "#00ffff", "#00bfff", "#0000ff", "#a020f0", "#adff2f",
"#ff6347", "#da70d6", "#d8bfd8", "#ff00ff", "#1e90ff", "#db7093", "#dda0dd",
"#add8e6", "#ff1493", "#7b68ee", "#ffa07a", "#98fb98", "#7fffd4", "#FCCDE5",
"#ff69b4", "#2f4f4f", "#556b2f", "#a0522d", "#006400",
"#708090", "#8b0000", "#A6D854"
)
P60 = c( "#000", "#a9a9a9", "#d3d3d3", "#2f4f4f", "#556b2f", "#6b8e23", "#a0522d",
"#2e8b57", "#228b22", "#800000", "#191970", "#006400", "#808000", "#483d8b",
"#b22222", "#5f9ea0", "#778899", "#3cb371", "#bc8f8f", "#663399", "#008080",
"#bdb76b", "#4682b4", "#d2691e", "#9acd32", "#20b2aa", "#cd5c5c", "#00008b",
"#4b0082", "#32cd32", "#daa520", "#7f007f", "#8fbc8f", "#b03060", "#d2b48c",
"#66cdaa", "#9932cc", "#ff0000", "#ff8c00", "#ffa500", "#ffd700", "#ffff00",
"#c71585", "#0000cd", "#40e0d0", "#7fff00", "#00ff00", "#ba55d3", "#00fa9a",
"#00ff7f", "#4169e1", "#dc143c", "#00ffff", "#00bfff", "#f4a460", "#9370db",
"#0000ff", "#a020f0", "#adff2f", "#ff6347", "#d8bfd8", "#b0c4de", "#ff00ff",
"#1e90ff", "#db7093", "#f0e68c", "#fa8072", "#ffff54", "#6495ed", "#dda0dd",
"#b0e0e6", "#90ee90", "#ff1493", "#7b68ee", "#ffa07a", "#f5deb3", "#ee82ee",
"#87cefa", "#7fffd4", "#ff69b4"
)
pres_abs <- c("red", "green")
# presence/ absence of whole set with and without genome assembly
SV_data <- SV_data_avg
#SV_data <- SV_data %>% filter(!is.na(presence)) %>% mutate( tips = str_replace(Species, "(species in domain Eukaryota)", ""))
tr <- tol_induced_subtree(ott_ids = SV_data$ott_id[SV_data$flags %in% c("sibling_higher", "")], label_format = "id")
tr <- multi2di(tr)
tr$tip.label <- SV_data$tips[match(tr$tip.label, paste("ott", SV_data$ott_id, sep = ""))]
ggtree(tr, layout = "circular") + geom_tiplab(color = "black", size = 0.8)
sv.plot <- ggtree(tr, layout = "circular") %<+% SV_data[, c("tips", "presence", "genome.assembly", "Order", "uuid")]
sv.plot <- sv.plot + geom_tile(data = sv.plot$data[!is.na(sv.plot$data$presence) & seq_len(nrow(sv.plot$data)) <= length(tr$tip.label), ], aes(y=y, x=x, fill = presence), inherit.aes = FALSE, color = "transparent") + scale_fill_manual(values = pres_abs)
sv.plot <- sv.plot + new_scale_fill() + geom_tile(data = sv.plot$data[1:length(tr$tip.label),], aes(y=y, x=x + 15, fill = Order), inherit.aes = FALSE, color = "transparent") + scale_fill_manual(values = P60)
sv.plot <- sv.plot + geom_tiplab(hjust = -0.2, size = 1)
sv.plot
SV_data_avg <- read.csv("/Users/juliamaja/Desktop/SV/SV_data_avg.csv")
View(SV_data_avg)
# presence/ absence of whole set with and without genome assembly
SV_data <- SV_data_avg
#SV_data <- SV_data %>% filter(!is.na(presence)) %>% mutate( tips = str_replace(Species, "(species in domain Eukaryota)", ""))
tr <- tol_induced_subtree(ott_ids = SV_data$ott_id[SV_data$flags %in% c("sibling_higher", "")], label_format = "id")
tr <- multi2di(tr)
tr$tip.label <- SV_data$tips[match(tr$tip.label, paste("ott", SV_data$ott_id, sep = ""))]
ggtree(tr, layout = "circular") + geom_tiplab(color = "black", size = 0.8)
sv.plot <- ggtree(tr, layout = "circular") %<+% SV_data[, c("tips", "presence", "genome.assembly", "Order", "uuid")]
View(SV_data)
SV_data_avg <- readRDS("/Users/juliamaja/Desktop/SV/SV_data_avg.RDS")
# color palettes
rainbow_pal <- colorRampPalette(rainbow(7))(100)
set.seed(12)
random_colors <- distinctColorPalette(99)
P50 = c("#483d8b", "#3cb371", "#bc8f8f", "#bdb76b", "#008b8b", "#4682b4", "#d2691e",
"#F8C471", "#cd5c5c", "#00008b", "#32cd32", "#daa520", "#8fbc8f", "#8b008b",
"#9932cc", "#ff4500", "#ff8c00", "#ffd700", "#F9E79F", "#244fa4", "#BCBD22",
"#00fa9a", "#dc143c", "#00ffff", "#00bfff", "#0000ff", "#a020f0", "#adff2f",
"#ff6347", "#da70d6", "#d8bfd8", "#ff00ff", "#1e90ff", "#db7093", "#dda0dd",
"#add8e6", "#ff1493", "#7b68ee", "#ffa07a", "#98fb98", "#7fffd4", "#FCCDE5",
"#ff69b4", "#2f4f4f", "#556b2f", "#a0522d", "#006400",
"#708090", "#8b0000", "#A6D854"
)
P60 = c( "#000", "#a9a9a9", "#d3d3d3", "#2f4f4f", "#556b2f", "#6b8e23", "#a0522d",
"#2e8b57", "#228b22", "#800000", "#191970", "#006400", "#808000", "#483d8b",
"#b22222", "#5f9ea0", "#778899", "#3cb371", "#bc8f8f", "#663399", "#008080",
"#bdb76b", "#4682b4", "#d2691e", "#9acd32", "#20b2aa", "#cd5c5c", "#00008b",
"#4b0082", "#32cd32", "#daa520", "#7f007f", "#8fbc8f", "#b03060", "#d2b48c",
"#66cdaa", "#9932cc", "#ff0000", "#ff8c00", "#ffa500", "#ffd700", "#ffff00",
"#c71585", "#0000cd", "#40e0d0", "#7fff00", "#00ff00", "#ba55d3", "#00fa9a",
"#00ff7f", "#4169e1", "#dc143c", "#00ffff", "#00bfff", "#f4a460", "#9370db",
"#0000ff", "#a020f0", "#adff2f", "#ff6347", "#d8bfd8", "#b0c4de", "#ff00ff",
"#1e90ff", "#db7093", "#f0e68c", "#fa8072", "#ffff54", "#6495ed", "#dda0dd",
"#b0e0e6", "#90ee90", "#ff1493", "#7b68ee", "#ffa07a", "#f5deb3", "#ee82ee",
"#87cefa", "#7fffd4", "#ff69b4"
)
pres_abs <- c("red", "green")
# SV presence/ absence
SV_data <- SV_data_avg
tr <- tol_induced_subtree(ott_ids = SV_data$ott_id[SV_data$flags %in% c("sibling_higher", "")], label_format = "id")
tr <- multi2di(tr)
tr$tip.label <- SV_data$tips[match(tr$tip.label, paste("ott", SV_data$ott_id, sep = ""))]
ggtree(tr, layout = "circular") + geom_tiplab(color = "black", size = 1.5)
sv_palette <- c("oldlace", "#FEEBE2", "#FBB4B9", "#F768A1", "#C51B8A", "#7A0177", "slateblue")
sv.plot <- ggtree(tr, layout = "circular") %<+% SV_data[, c("tips", "presence", "genome.assembly")]
sv.plot <- sv.plot + geom_tile(data = sv.plot$data[1:length(tr$tip.label),], aes(y=y, x=x, fill = presence), inherit.aes = FALSE, color = "transparent") + scale_fill_brewer(palette = "RdPu")
#sv.plot <- sv.plot + geom_tile(data = sv.plot$data[1:length(tr$tip.label),], aes(y=y, x=x+15, fill = genome.assembly), inherit.aes = FALSE, color = "transparent") + scale_fill_manual(values = sv_palette)
sv.plot <- sv.plot + geom_tiplab(hjust = -0.2, size = 1.5)
sv.plot
# presence/ absence of whole set with and without genome assembly
SV_data <- SV_data_avg
#SV_data <- SV_data %>% filter(!is.na(presence)) %>% mutate( tips = str_replace(Species, "(species in domain Eukaryota)", ""))
tr <- tol_induced_subtree(ott_ids = SV_data$ott_id[SV_data$flags %in% c("sibling_higher", "")], label_format = "id")
tr <- multi2di(tr)
tr$tip.label <- SV_data$tips[match(tr$tip.label, paste("ott", SV_data$ott_id, sep = ""))]
ggtree(tr, layout = "circular") + geom_tiplab(color = "black", size = 0.8)
sv.plot <- ggtree(tr, layout = "circular") %<+% SV_data[, c("tips", "presence", "genome.assembly", "Order", "uuid")]
SV_data$tips
sv.plot <- ggtree(tr, layout = "circular") %<+% SV_data[, c("tips", "presence", "genome.assembly", "Order")]
sv.plot <- sv.plot + new_scale_fill() + geom_tile(data = sv.plot$data[1:length(tr$tip.label),], aes(y=y, x=x + 15, fill = Order), inherit.aes = FALSE, color = "transparent") + scale_fill_manual(values = P60)
sv.plot <- sv.plot + geom_tiplab(hjust = -0.2, size = 1)
sv.plot
sv.plot <- sv.plot + geom_tile(data = sv.plot$data[!is.na(sv.plot$data$presence) & seq_len(nrow(sv.plot$data)) <= length(tr$tip.label), ], aes(y=y, x=x, fill = presence), inherit.aes = FALSE, color = "transparent") + scale_fill_manual(values = pres_abs)
sv.plot <- sv.plot + new_scale_fill() + geom_tile(data = sv.plot$data[1:length(tr$tip.label),], aes(y=y, x=x + 15, fill = Order), inherit.aes = FALSE, color = "transparent") + scale_fill_manual(values = P60)
sv.plot <- sv.plot + geom_tile(data = sv.plot$data[!is.na(sv.plot$data$presence) & seq_len(nrow(sv.plot$data)) <= length(tr$tip.label), ], aes(y=y, x=x, fill = presence), inherit.aes = FALSE, color = "transparent") + scale_fill_manual(values = pres_abs)
sv.plot
ggtree(tr, layout = "circular") + geom_tiplab(color = "black", size = 0.8)
sv.plot <- ggtree(tr, layout = "circular") %<+% SV_data[, c("tips", "presence", "genome.assembly", "Order")]
sv.plot <- sv.plot + geom_tile(data = sv.plot$data[!is.na(sv.plot$data$presence) & seq_len(nrow(sv.plot$data)) <= length(tr$tip.label), ], aes(y=y, x=x, fill = presence), inherit.aes = FALSE, color = "transparent") + scale_fill_manual(values = pres_abs)
sv.plot
sv.plot <- sv.plot + new_scale_fill() + geom_tile(data = sv.plot$data[1:length(tr$tip.label),], aes(y=y, x=x + 15, fill = Order), inherit.aes = FALSE, color = "transparent") + scale_fill_manual(values = P60)
sv.plot
sv.plot <- sv.plot + new_scale_fill() + geom_tile(data = sv.plot$data[1:length(tr$tip.label),], aes(y=y, x=x + 15, fill = Order), inherit.aes = FALSE, color = "transparent") + scale_fill_manual(values = P60)
sv.plot
sv.plot <- ggtree(tr, layout = "circular") %<+% SV_data[, c("tips", "presence", "genome.assembly", "Order")]
sv.plot <- sv.plot + geom_tile(data = sv.plot$data[!is.na(sv.plot$data$presence) & seq_len(nrow(sv.plot$data)) <= length(tr$tip.label), ], aes(y=y, x=x, fill = presence), inherit.aes = FALSE, color = "transparent") + scale_fill_manual(values = pres_abs)
sv.plot <- sv.plot + new_scale_fill() + geom_tile(data = sv.plot$data[1:length(tr$tip.label),], aes(y=y, x=x + 15, fill = Order), inherit.aes = FALSE, color = "transparent") + scale_fill_manual(values = P60)
sv.plot <- sv.plot + geom_tiplab(hjust = -0.2, size = 1)
sv.plot
View(SV_data)
View(SV_data)
# trpy_n <- readRDS("/Users/juliamaja/Desktop/SV/fish_time_tree.rds")
trpy_n <- readRDS("/Users/juliamaja/Desktop/SV/tr_tree_calibrated_8_25.rds") # my tree
# removing jawless fish
trpy_n <- drop.tip(trpy_n, "Eptatretus_atami", "Myxine_glutinosa")
# removing jawless fish
trpy_n <- drop.tip(trpy_n, c("Eptatretus_atami", "Myxine_glutinosa"))
tr <- trpy_n
ER_model <- corHMM(phy = trpy_n, data = SV_data_avg[, c("tips", "presence")], rate.cat = 1, model = "ER", node.states = "marginal")
SYM_model <- corHMM(phy = trpy_n, data = SV_data_avg[, c("tips", "presence")], rate.cat = 1, model = "SYM", node.states = "marginal")
ARD_model <- corHMM(phy = trpy_n, data = SV_data_avg[, c("tips", "presence")], rate.cat = 1, model = "ARD", node.states = "marginal")
model_results_list <- list(ER_model, SYM_model, ARD_model)
saveRDS(model_results_list, "SV_reconstruction_results.RDS")
#currently I have max_clade_crep data for: artio max_crep, artio max_dinoc
#to do: cetacean max_crep, cetacean max_dinoc, artio w/out cetaceans max_crep, artio w/out cetaceans max_dinoc
all_model_results <- readRDS("SV_reconstruction_results.RDS")
model_results <- all_model_results[[3]]
model_name <- "ARD"
lik.anc <- as.data.frame(rbind(model_results$tip.states, model_results$states))
colnames(lik.anc) <- c("absent", "present")
phylo_tree <- model_results$phy
lik.anc$node <- c(1:length(phylo_tree$tip.label), (length(phylo_tree$tip.label) + 1):(phylo_tree$Nnode + length(phylo_tree$tip.label)))
#plot the ancestral reconstruction, displaying each of the three trait states (cathemeral, diurnal, nocturnal)
ancestral_plot <- ggtree(phylo_tree, layout = "circular") %<+% lik.anc +
aes(color = present) + geom_tippoint(aes(color = present), shape = 16, size = 1) +
scale_color_distiller(name = "SV presence", palette = "RdYlGn", direction = 1)  +
geom_tiplab(color = "black", size = 1.5, offset = 0.5) +
geom_tippoint(aes(color = present), shape = 16, size = 1.5)
#ancestral_plot <- ancestral_plot + geom_tiplab(hjust = -0.2, size = 1.5)
ancestral_plot
ARD_model
View(SV_data_avg)
# load google sheet
url <- 'https://docs.google.com/spreadsheets/d/1Z2P6dAcoU0-Kh0UqVgIAeongX5IJohuMUKG1PyrNraU/edit?gid=84578656#gid=84578656'
library(ape)
library(corHMM)
library(phangorn)
library(stringr)
library(here)
library(rotl)
library(ggtree)
library(gsheet)
library(dplyr)
library(phytools)
library(geiger)
library(ggplot2)
library(rphylopic)
library(RColorBrewer)
library(ggimage)
library(rfishbase)
library(rentrez)
library(taxize)
# load google sheet
url <- 'https://docs.google.com/spreadsheets/d/1Z2P6dAcoU0-Kh0UqVgIAeongX5IJohuMUKG1PyrNraU/edit?gid=84578656#gid=84578656'
sp_data <- read.csv(text=gsheet2text(url, format='csv'), stringsAsFactors=FALSE) # as of april 17: 667 sp with data, 1183 left to check. the rest are "no data".
trait.data <- sp_data[,c("species", "SV", "order")]
trait.data$tips <- trait.data$species
#trait.data$tips <- str_replace(trait.data$species, pattern = " ", replacement = "_")
trait.data <- trait.data %>% mutate(species = str_replace(species, " ", "_"))
# resolve spcies names with open tree of life
otol_names <- tnrs_match_names(names = trait.data$species, context_name = "Vertebrates", do_approximate_matching = TRUE)
resolved_names <- (otol_names[!(is.na(otol_names$unique_name)),]
%>%  rename( "species" = "search_string")
%>% mutate(species = str_replace(species, " ", "_"))
%>% select(species, unique_name, "ott_id", "flags")
)
#resolved_names <- distinct(resolved_names, ott_id, .keep_all = TRUE)
saveRDS(resolved_names, "resolved_names.rds")
View(trait.data)
View(sp_data)
SV_data <- sp_data %>% mutate(species = str_replace(species, " ", "_")) # as of april 17: 597 obs. as of june 6: 773 obs as of june 19, 2456 obs
SV_data <- SV_data %>% mutate(species = str_replace(species, " ", "_"))
SV_data <- SV_data %>% mutate(species = tolower(species))
SV_data <- SV_data %>% left_join(resolved_names, by = "species")
SV_data <- SV_data %>% mutate(tips = unique_name)
View(SV_data)
View(SV_data)
SV_data <- SV_data %>% group_by(unique_name)
SV_data <- SV_data %>% mutate(
genome.assembly = if_else(
genome.assembly == '' & any(genome.assembly == 'y'),
'y',
genome.assembly
)
)
SV_data <- SV_data %>% ungroup()
SV_data <- SV_data %>% rename("Source" = "source")
#SV_data <- SV_data %>% filter(Source != "")
SV_data <- SV_data %>% filter(SV != "no data")
SV_data <- SV_data %>% filter(SV != "m")
SV_data <- SV_data %>% mutate(SV = str_replace(SV, "2", "1"), str_replace(SV, "0.5", "1"), str_replace(SV, "2.5", "2"), str_replace(SV, "3.5", "4"))
SV_data_3 <- SV_data %>% filter(is.na(unique_name)) %>% filter(!grepl("sp.", species)) %>% filter(species !="")   # to see which species names are not in OTOL # 11 cases as of july 7th
SV_data_2 <- SV_data %>% filter(unique_name !="")
SV_data_4 <- anti_join(SV_data, SV_data_2)
SV_data <- SV_data %>% filter(unique_name !="")
SV_data <- SV_data %>% select("species", "unique_name", "order", "SV", "presence", "genome.assembly", "ott_id", "flags", "tips", "SV.not.in.figure", "image.files", "description", "Source")
SV_data <- SV_data %>%
filter(!(is.na(SV) | SV == "") | !(is.na(presence) | presence == ""))
#SV_data <- SV_data %>% filter(SV != "" & presence != "")
SV_data <- SV_data %>% mutate(presence = ifelse(SV == "0", "absent", "present"))
SV_data <- SV_data %>% mutate(SV = ifelse(SV == "present", NA, SV))
SV_data <- SV_data %>% rename("Species" = "unique_name")
SV_data <- SV_data %>% select("Species", "order", "SV", "presence", "genome.assembly", "ott_id", "flags", "tips", "SV.not.in.figure", "image.files", "description", "Source")
get_rank <- function(tax_info, rank_name) {
lineage <- tax_lineage(tax_info)[[1]]
values <- lineage$name[lineage$rank == rank_name]
if (length(values) == 0) return(NA_character_) else return(values[1])
}
# fill in taxonomy
df <- SV_data %>%
rowwise() %>%
mutate(
tax_info = list(taxonomy_taxon_info(ott_id, include_lineage = TRUE)),
order = get_rank(tax_info, "order"),
family = get_rank(tax_info, "family"),
genus = get_rank(tax_info, "genus")
) %>%
ungroup() %>%
select(-tax_info)
SV_data <- df %>% rename("Order" = "order") %>% rename("Genus" = "genus") %>% rename("Family" = "family")
SV_data <- SV_data %>% select("Species", "Order", "Family", "Genus", "SV", "presence", "genome.assembly", "ott_id", "flags", "tips", "SV.not.in.figure", "image.files", "description", "Source")
missing_tax <- SV_data %>% filter(is.na(Genus) | is.na(Family) | is.na(Order)) # check where there are problems # 19
# fill in the gaps with FishBase
fishbase_species <- rfishbase::load_taxa()
missing_tax <- missing_tax %>% left_join(fishbase_species, by = "Species")
missing_tax <- missing_tax %>% rename("Order" = "Order.y") %>% rename("Genus" = "Genus.y") %>% rename("Family" = "Family.y")
missing_tax <- missing_tax %>% select("Species", "Order", "Family", "Genus", "SV", "presence", "genome.assembly", "ott_id", "flags", "tips", "SV.not.in.figure", "image.files", "description", "Source")
SV_data <- SV_data %>% filter(!is.na(Genus)) %>% filter(!is.na(Family)) %>% filter(!is.na(Order)) #filter out rows with missing taxonomy values
SV_data <- SV_data %>% bind_rows(missing_tax) # add the FishBase correced rows
SV_data <- SV_data %>% filter(!is.na(Genus)) %>% filter(!is.na(Family)) %>% filter(!is.na(Order)) #remove any rows where FishBase couldn't solve the msising value
write.csv(SV_data, "/Users/juliamaja/Desktop/SV/SV_data.csv")
SV_data_avg <- SV_data %>% group_by(Species)
SV_data_avg$presence <- ifelse(SV_data_avg$SV == "present", "present", SV)
View(SV_data_avg)
View(SV_data)
SV_data_avg <- SV_data_avg %>% mutate(Species = as.character(Species), SV = as.numeric(SV))
View(SV_data)
View(SV_data)
View(SV_data)
View(sp_data)
View(SV_data)
SV_data <- SV_data %>% mutate(SV = ifelse(SV == "present ", NA, SV))
write.csv(SV_data, "/Users/juliamaja/Desktop/SV/SV_data.csv")
SV_data_avg <- SV_data %>% group_by(Species)
SV_data_avg <- SV_data_avg %>% mutate(Species = as.character(Species), SV = as.numeric(SV))
SV_data_avg <- SV_data_avg %>% mutate(SV = ifelse(SV == 0, NA, SV))
SV_data_avg <- SV_data_avg %>% mutate(SV2 = median(SV, na.rm = TRUE))
SV_data_avg <- SV_data_avg %>% group_by(Species) %>% mutate(SV3 = ifelse(all(is.na(SV)) & presence == "absent",0,SV2))
#SV_avg =
SV_data_avg <- SV_data_avg %>% group_by(Species) %>% mutate(SV3 = ifelse( presence == "absent" & any(presence == "present"), NA, SV3))
SV_data_avg <- SV_data_avg %>% group_by(Species) %>% mutate(presence = ifelse( presence == "absent" & any(presence == "present"), "present", presence ))
SV_data_avg <- SV_data_avg %>% group_by(Species) %>% mutate(SV3 = ifelse(is.na(SV3) & any(!is.na(SV3)), first(na.omit(SV3)), SV3))
SV_data_avg <- SV_data_avg %>% select("Species", "Order", "Family", "Genus", "SV3", "presence", "genome.assembly", "ott_id", "flags", "tips", "SV.not.in.figure")
#dealing with cases where SV is not seen in figure:
SV_data_avg <- SV_data_avg %>% group_by(Species) %>% mutate(SV.not.in.figure = if (any(SV.not.in.figure != "y")) ifelse(SV.not.in.figure == "y", "", SV.not.in.figure) else SV.not.in.figure) %>% ungroup()
SV_data_avg <- SV_data_avg %>% distinct()
SV_data_avg <- SV_data_avg %>% ungroup()
SV_data_avg <- SV_data_avg %>% mutate(tips = str_replace(tips, " ", "_")) # as of april 17: 478 species. as of june 6: 592
#SV_data_avg <- SV_data_avg %>% filter(!duplicated(SV_data_avg$Species))
SV_duplicates <- SV_data_avg[duplicated(SV_data_avg$Species),]
View(SV_duplicates)
View(SV_data_avg)
SV_data_avg <- SV_data_avg %>% filter(SV.not.in.figure =! "y")
SV_data_avg <- SV_data_avg %>% filter(SV.not.in.figure == ! "y")
SV_data_avg <- SV_data_avg %>% filter(SV.not.in.figure != "y")
SV_data_avg <- SV_data %>% group_by(Species)
SV_data_avg <- SV_data_avg %>% mutate(Species = as.character(Species), SV = as.numeric(SV))
SV_data_avg <- SV_data_avg %>% mutate(SV = ifelse(SV == 0, NA, SV))
#SV_data_avg <- SV_data_avg %>% mutate(test = !(any(SV > 0) & SV ==0))
#SV_data_avg <- SV_data_avg %>% filter(!(any(SV > 0) & SV == 0))
SV_data_avg <- SV_data_avg %>% mutate(SV2 = median(SV, na.rm = TRUE))
SV_data_avg <- SV_data_avg %>% group_by(Species) %>% mutate(SV3 = ifelse(all(is.na(SV)) & presence == "absent",0,SV2))
#SV_avg =
SV_data_avg <- SV_data_avg %>% group_by(Species) %>% mutate(SV3 = ifelse( presence == "absent" & any(presence == "present"), NA, SV3))
SV_data_avg <- SV_data_avg %>% group_by(Species) %>% mutate(presence = ifelse( presence == "absent" & any(presence == "present"), "present", presence ))
SV_data_avg <- SV_data_avg %>% group_by(Species) %>% mutate(SV3 = ifelse(is.na(SV3) & any(!is.na(SV3)), first(na.omit(SV3)), SV3))
# SV_data_avg <- SV_data_avg %>% mutate(SV = ifelse(present == "present" & is.na(SV), "present", SV))
#SV_data_avg <- SV_data_avg %>% rename("SV" = "SV3")
SV_data_avg <- SV_data_avg %>% select("Species", "Order", "Family", "Genus", "SV3", "presence", "genome.assembly", "ott_id", "flags", "tips", "SV.not.in.figure")
#dealing with cases where SV is not seen in figure:
SV_data_avg <- SV_data_avg %>% group_by(Species) %>% mutate(SV.not.in.figure = if (any(SV.not.in.figure != "y")) ifelse(SV.not.in.figure == "y", "", SV.not.in.figure) else SV.not.in.figure) %>% ungroup()
SV_data_avg <- SV_data_avg %>% distinct()
SV_data_avg <- SV_data_avg %>% ungroup()
SV_data_avg <- SV_data_avg %>% mutate(tips = str_replace(tips, " ", "_")) # as of april 17: 478 species. as of june 6: 592
# duplicates because of diff orders for same species:
# undefined_orders <- SV_data_avg %>% group_by(Species) %>% filter(n_distinct(order) > 1)
# ohh this is beacause initially some species have orders in one entry but not in others! perhaps remove all those and redo orders with fishbase
# solved
# check for other duplicates in species names:
#SV_data_avg <- SV_data_avg %>% filter(!duplicated(SV_data_avg$Species))
SV_duplicates <- SV_data_avg[duplicated(SV_data_avg$Species),]
View(SV_duplicates)
View(SV_data_avg)
SV_data_avg <- SV_data_avg %>% filter(SV.not.in.figure != "y")
611-538
write.csv(SV_data_avg, "/Users/juliamaja/Desktop/SV/SV_data_avg.csv")
SV_data_avg <- readRDS("/Users/juliamaja/Desktop/SV/SV_data_avg.csv")
# corHMM ------------------------------------------------------------------
library("corHMM")
library(AICcmodavg)
# trpy_n <- readRDS("/Users/juliamaja/Desktop/SV/fish_time_tree.rds")
trpy_n <- readRDS("/Users/juliamaja/Desktop/SV/tr_tree_calibrated_8_25.rds") # my tree
# removing jawless fish
trpy_n <- drop.tip(trpy_n, c("Eptatretus_atami", "Myxine_glutinosa"))
tr <- trpy_n
ER_model <- corHMM(phy = trpy_n, data = SV_data_avg[, c("tips", "presence")], rate.cat = 1, model = "ER", node.states = "marginal")
trpy_n$tip.label
# drop tips that aren't in my dataset
setdiff(trpy_n$tip.label, SV_data_avg$tips)
trpy_n <- drop.tip(trpy_n, to_drop)
# drop tips that aren't in my dataset
to_drop <- setdiff(trpy_n$tip.label, SV_data_avg$tips)
trpy_n <- drop.tip(trpy_n, to_drop)
tr <- trpy_n
ER_model <- corHMM(phy = trpy_n, data = SV_data_avg[, c("tips", "presence")], rate.cat = 1, model = "ER", node.states = "marginal")
trpy_n$tip.label
# drop tips that aren't in my dataset
tips_to_drop <- setdiff(trpy_n$tip.label, SV_data_avg$tips)
trpy_n <- drop.tip(trpy_n, tips_to_drop)
