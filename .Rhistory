%>% mutate(SV = as.character(SV))
%>% left_join(SV_data, by = "Species")
%>% rename("SV" = "SV.x")
#%>% select("Species", "SV", "Order", "Family", "Genus", "presence", "genome.assembly", "ott_id", "flags", "tips")
%>% group_by(Species)
%>% distinct()
%>% ungroup()
)
SV_data_avg <- (SV_data_orders %>% group_by(Species)
%>% mutate(Species = as.character(Species), SV = as.numeric(SV))
%>% mutate(nonzero_exists = any(SV > 0))
%>% filter((nonzero_exists & SV == 0))
%>% summarise(SV = median(SV, na.rm = TRUE))
%>% ungroup()
%>% mutate(SV = as.character(SV))
%>% left_join(SV_data_orders, by = "Species")
%>% rename("SV" = "SV.x")
%>% select("Species", "SV", "Order", "Family", "Genus", "presence", "genome.assembly", "ott_id", "flags", "tips")
%>% group_by(Species)
%>% distinct()
%>% ungroup()
)
SV_data <- SV_data %>% left_join(fishbase_species, by = "Species")
SV_data <- SV_data_orders %>% select("Species", "Order", "Family", "Genus", "SV", "presence", "genome.assembly", "ott_id", "flags", "tips")
SV_data_avg <- (SV_data %>% group_by(Species)
%>% mutate(Species = as.character(Species), SV = as.numeric(SV))
%>% mutate(nonzero_exists = any(SV > 0))
%>% filter((nonzero_exists & SV == 0))
%>% summarise(SV = median(SV, na.rm = TRUE))
%>% ungroup()
%>% mutate(SV = as.character(SV))
%>% left_join(SV_data, by = "Species")
%>% rename("SV" = "SV.x")
%>% select("Species", "SV", "Order", "Family", "Genus", "presence", "genome.assembly", "ott_id", "flags", "tips")
%>% group_by(Species)
%>% distinct()
%>% ungroup()
)
SV_data <- sp_data %>% mutate(species = str_replace(species, " ", "_"))
SV_data <- SV_data %>% mutate(species = str_replace(species, " ", "_"))
SV_data <- SV_data %>% mutate(species = tolower(species))
SV_data <- SV_data %>% group_by(species)
SV_data <- SV_data %>% mutate(
genome.assembly = if_else(
genome.assembly == '' & any(genome.assembly == 'y'),
'y',
genome.assembly
)
)
SV_data <- SV_data %>% ungroup()
SV_data <- SV_data %>% left_join(resolved_names, by = "species")
SV_data <- SV_data %>% mutate(tips = unique_name)
SV_data <- SV_data %>% rename("Source" = "source")
SV_data <- SV_data %>% filter(Source != "")
SV_data <- SV_data %>% mutate(SV = str_replace(SV, "2", "1"), str_replace(SV, "0.5", "1"), str_replace(SV, "2.5", "2"), str_replace(SV, "3.5", "4"))
SV_data <- SV_data %>% filter(unique_name !="")
SV_data <- SV_data %>% select("species", "unique_name", "order", "SV", "presence", "genome.assembly", "ott_id", "flags", "tips")
SV_data <- SV_data %>% filter(SV != "")
SV_data <- SV_data %>% mutate(presence = ifelse(SV == "0", "absent", "present"))
SV_data <- SV_data %>% mutate(SV = ifelse(SV == "present", NA, SV))
SV_data <- SV_data %>% rename("Species" = "unique_name")
SV_data <- SV_data %>% select("Species", "order", "SV", "presence", "genome.assembly", "ott_id", "flags", "tips")
View(SV_data)
SV_data_orders <- SV_data %>% left_join(fishbase_species, by = "Species")
SV_data_orders <- SV_data_orders %>% select("Species", "Order", "Family", "Genus", "SV", "presence", "genome.assembly", "ott_id", "flags", "tips")
SV_data_avg <- SV_data_orders %>% group_by(Species)
SV_data_avg <- SV_data_avg %>% mutate(Species = as.character(Species), SV = as.numeric(SV))
SV_data_avg <- SV_data_avg %>% mutate(SV = ifelse(SV == 0, NA, SV))
#SV_data_avg <- SV_data_avg %>% mutate(test = !(any(SV > 0) & SV ==0))
#SV_data_avg <- SV_data_avg %>% filter(!(any(SV > 0) & SV == 0))
SV_data_avg <- SV_data_avg %>% mutate(SV2 = median(SV, na.rm = TRUE))
SV_data_avg <- SV_data_avg %>% group_by(Species) %>% mutate(SV3 = ifelse(all(is.na(SV)) & presence == "absent",0,SV2))
SV_data_avg <- SV_data_avg %>% group_by(Species) %>% mutate(presence = ifelse( presence == "absent" & any(presence == "present"), "present", presence ))
SV_data_avg <- SV_data_avg %>% select("Species", "Order", "Family", "Genus", "SV3", "presence", "genome.assembly", "ott_id", "flags", "tips")
SV_data_avg <- SV_data_avg %>% distinct()
SV_data_avg <- SV_data_avg %>% ungroup()
SV_data_avg <- SV_data_avg %>% mutate(tips = str_replace(tips, " ", "_"))
View(SV_data_avg)
# check for other duplicates in species names:
SV_duplicates <- SV_data_avg[duplicated(SV_data_avg$Species),]
SV_data <- SV_data %>% left_join(fishbase_species, by = "Species")
SV_data <- SV_data_orders %>% select("Species", "Order", "Family", "Genus", "SV", "presence", "genome.assembly", "ott_id", "flags", "tips")
SV_data_avg <- SV_data %>% group_by(Species)
SV_data_avg <- SV_data_avg %>% mutate(Species = as.character(Species), SV = as.numeric(SV))
SV_data_avg <- SV_data_avg %>% mutate(SV = ifelse(SV == 0, NA, SV))
#SV_data_avg <- SV_data_avg %>% mutate(test = !(any(SV > 0) & SV ==0))
#SV_data_avg <- SV_data_avg %>% filter(!(any(SV > 0) & SV == 0))
SV_data_avg <- SV_data_avg %>% mutate(SV2 = median(SV, na.rm = TRUE))
SV_data_avg <- SV_data_avg %>% group_by(Species) %>% mutate(SV3 = ifelse(all(is.na(SV)) & presence == "absent",0,SV2))
SV_data_avg <- SV_data_avg %>% group_by(Species) %>% mutate(presence = ifelse( presence == "absent" & any(presence == "present"), "present", presence ))
SV_data_avg <- SV_data_avg %>% select("Species", "Order", "Family", "Genus", "SV3", "presence", "genome.assembly", "ott_id", "flags", "tips")
SV_data_avg <- SV_data_avg %>% distinct()
SV_data_avg <- SV_data_avg %>% ungroup()
SV_data_avg <- SV_data_avg %>% mutate(tips = str_replace(tips, " ", "_"))
# duplicates because of diff orders for same species:
# undefined_orders <- SV_data_avg %>% group_by(Species) %>% filter(n_distinct(order) > 1)
# ohh this is beacause initially some species have orders in one entry but not in others! perhaps remove all those and redo orders with fishbase
# solved
# check for other duplicates in species names:
SV_duplicates <- SV_data_avg[duplicated(SV_data_avg$Species),]
View(SV_duplicates)
write.csv(SV_data_avg, "/Users/user2/Desktop/SV_project/SV_data_avg.csv")
SV_data_avg <- read.csv("/Users/user2/Desktop/SV_project/SV_data_avg.csv")
resolved_names <- SV_data_avg
# SV presence/ absence
tr <- tol_induced_subtree(ott_ids = resolved_names$ott_id[resolved_names$flags %in% c("sibling_higher", "")], label_format = "id")
tr <- multi2di(tr)
resolved_names$ott_id <- paste("ott", resolved_names$ott_id, sep = "")
tr$tip.label <- resolved_names$tips[match(tr$tip.label, paste("ott", resolved_names$ott_id, sep = ""))]
reference.df <- resolved_names[resolved_names$ott_id %in% tr$tip.label,c("Order", "Family", "Genus", "Species", "tips", "ott_id")]
colnames(reference.df) <- c("Order", "Family", "Genus", "Species", "tips_species", "tips")
rownames(reference.df) <- reference.df$tips
reference.df <- resolved_names[resolved_names$ott_id %in% tr$tip.label,c("Order", "Family", "Genus", "Species", "tips", "ott_id")]
View(tr)
# SV presence/ absence
tr <- tol_induced_subtree(ott_ids = resolved_names$ott_id[resolved_names$flags %in% c("sibling_higher", "")], label_format = "id")
View(tr)
source("/Users/user2/Desktop/SV_project/SV_functions.R")
SV_data_avg <- read.csv("/Users/user2/Desktop/SV_project/SV_data_avg.csv")
resolved_names <- SV_data_avg
# SV presence/ absence
tr <- tol_induced_subtree(ott_ids = resolved_names$ott_id[resolved_names$flags %in% c("sibling_higher", "")], label_format = "id")
View(tr)
tr <- multi2di(tr)
resolved_names$ott_id <- paste("ott", resolved_names$ott_id, sep = "")
View(resolved_names)
tr$tip.label <- resolved_names$tips[match(tr$tip.label, paste("ott", resolved_names$ott_id, sep = ""))]
View(tr)
# SV presence/ absence
tr <- tol_induced_subtree(ott_ids = resolved_names$ott_id[resolved_names$flags %in% c("sibling_higher", "")], label_format = "id")
tr <- multi2di(tr)
View(tr)
rm(tr)
# SV presence/ absence
tr <- tol_induced_subtree(ott_ids = resolved_names$ott_id[resolved_names$flags %in% c("sibling_higher", "")], label_format = "id")
tr <- multi2di(tr)
resolved_names$ott_id <- paste("ott", resolved_names$ott_id, sep = "")
source("/Users/user2/Desktop/SV_project/SV_functions.R")
SV_data_avg <- read.csv("/Users/user2/Desktop/SV_project/SV_data_avg.csv")
resolved_names <- SV_data_avg
# SV presence/ absence
tr <- tol_induced_subtree(ott_ids = resolved_names$ott_id[resolved_names$flags %in% c("sibling_higher", "")], label_format = "id")
tr <- multi2di(tr)
View(resolved_names)
View(tr)
SV_data_avg <- read.csv("/Users/user2/Desktop/SV_project/SV_data_avg.csv")
resolved_names <- SV_data_avg
paste("ott", resolved_names$ott_id, sep = "")
source("/Users/user2/Desktop/SV_project/SV_functions.R")
SV_data_avg <- read.csv("/Users/user2/Desktop/SV_project/SV_data_avg.csv")
resolved_names <- SV_data_avg
# SV presence/ absence
tr <- tol_induced_subtree(ott_ids = resolved_names$ott_id[resolved_names$flags %in% c("sibling_higher", "")], label_format = "id")
tr <- multi2di(tr)
resolved_names$ott_id <- paste("ott", resolved_names$ott_id, sep = "")
View(tr)
reference.df <- resolved_names[resolved_names$ott_id %in% tr$tip.label,c("Order", "Family", "Genus", "Species", "tips", "ott_id")]
colnames(reference.df) <- c("Order", "Family", "Genus", "Species", "tips_species", "tips")
rownames(reference.df) <- reference.df$tips
View(reference.df)
# some are duplicated, or have missing data, remove them
reference.df <- reference.df[!duplicated(reference.df$unique_name),]
reference.df <- reference.df[!is.na(reference.df$unique_name),]
SV_data_avg <- read.csv("/Users/user2/Desktop/SV_project/SV_data_avg.csv")
resolved_names <- SV_data_avg
# SV presence/ absence
tr <- tol_induced_subtree(ott_ids = resolved_names$ott_id[resolved_names$flags %in% c("sibling_higher", "")], label_format = "id")
tr <- multi2di(tr)
resolved_names$ott_id <- paste("ott", resolved_names$ott_id, sep = "")
# time calibrate the tree:
reference.df <- resolved_names[resolved_names$ott_id %in% tr$tip.label,c("Order", "Family", "Genus", "Species", "tips", "ott_id")]
colnames(reference.df) <- c("Order", "Family", "Genus", "Species", "tips_species", "tips")
rownames(reference.df) <- reference.df$tips
# # two tips can't be found in the resolved_names df, but I cannot figure out why
# > tr$tip.label[!(tr$tip.label %in% resolved_names$ott_id)]
# [1] "mrcaott320143ott351725" "mrcaott106188ott185786"
# some are duplicated, or have missing data, remove them
reference.df <- reference.df[!duplicated(reference.df$unique_name),]
SV_data_avg <- read.csv("/Users/user2/Desktop/SV_project/SV_data_avg.csv")
resolved_names <- SV_data_avg
# SV presence/ absence
tr <- tol_induced_subtree(ott_ids = resolved_names$ott_id[resolved_names$flags %in% c("sibling_higher", "")], label_format = "id")
tr <- multi2di(tr)
resolved_names$ott_id <- paste("ott", resolved_names$ott_id, sep = "")
# time calibrate the tree:
reference.df <- resolved_names[resolved_names$ott_id %in% tr$tip.label,c("Order", "Family", "Genus", "Species", "tips", "ott_id")]
colnames(reference.df) <- c("Order", "Family", "Genus", "Species", "tips_species", "tips")
rownames(reference.df) <- reference.df$tips
View(reference.df)
SV_duplicates <- reference.df[duplicated(reference.df$Species),]
# some are duplicated, or have missing data, remove them
reference.df <- reference.df[!duplicated(reference.df$Species),]
reference.df <- reference.df[!is.na(reference.df$Species),]
here
here()
saveRDS(reference.df, "/Users/user2/Desktop/SV_project/reference_df.rds")
saveRDS(tr, "/Users/user2/Desktop/SV_project/tol_induced_tree.rds")
saveRDS(reference.df, "/Users/user2/Desktop/SV_project/reference_df.rds")
saveRDS(tr, "/Users/user2/Desktop/SV_project/tol_induced_tree.rds")
reference.df <- readRDS("/Users/user2/Desktop/SV_project/reference_df.rds")
tr <- readRDS("/Users/user2/Desktop/SV_project/tol_induced_tree.rds")
timetree_order <- ape::read.tree("/Users/user2/Desktop/SV_project/timetree_data/actinopterygii_order.nwk")
timetree_order <- ape::read.tree("/Users/user2/Desktop/SV_project/timetree_data/actinopterygii_order.nwk")
timetree_order <- ape::read.tree("/Users/user2/Desktop/SV_project/timetree_data/actinopterygii_order.nwk")
timetree_family <- ape::read.tree("/Users/user2/Desktop/SV_project/timetree_data/actinopterygii_family.nwk")
timetree_genus <- ape::read.tree("/Users/user2/Desktop/SV_project/timetree_data/actinopterygii_genus.nwk")
# Use geiger to congruify the tree, works with treePL
# This seems to work up to genus, but not species (by replacing tip.labels with the same names)
setwd("/Users/user2/Desktop/SV_project/timetree_data/actinopterygii_genus.nwk")
geiger.order <- congruify.phylo(reference = timetree_order, target = tr, taxonomy = reference.df, tol = 0, scale = "treePL")
geiger.order <- congruify.phylo(reference = timetree_order, target = tr, taxonomy = reference.df, tol = 0, scale = "treePL")
library(ape)
library(corHMM)
library(phangorn)
library(stringr)
library(here)
library(rotl)
library(ggtree)
library(gsheet)
library(dplyr)
library(phytools)
library(geiger)
library(ggplot2)
library(rphylopic)
library(RColorBrewer)
library(ggimage)
library(rfishbase)
library(rentrez)
library(taxize)
library(rotl)
library(ggtree)
library(stringr)
library(scales)
library(gsheet)
library(ape)
library(patchwork)
library(ggpubr)
library(xlsx)
library(geiger)
library(here)
geiger.order <- congruify.phylo(reference = timetree_order, target = tr, taxonomy = reference.df, tol = 0, scale = "treePL")
install.packages('treePL')
av <- available.packages(filters=list())
av[av[, "Package"] == ‘treePL’, ]
av <- available.packages(filters=list())
av[av[, "Package"] == ‘treePL’, ]
av[av[, "Package"] == treePL, ]
av[av[, "Package"] == "treePL", ]
av[av[, "treePL"] == "treePL", ]
av[av[, "Package"] == "treePL", ]
View(av)
SV_data_avg <- read.csv("/Users/user2/Desktop/SV_project/SV_data_avg.csv")
SV_data_avg <- read.csv("/Users/user2/Desktop/SV_project/SV_data_avg.csv")
SV_data_avg <- read.csv("/Users/juliamaja/Desktop/SV_project/SV_data_avg.csv")
SV_data_avg <- read.csv("/Users/juliamaja/Desktop/SV/SV_data_avg.csv")
SV_data_avg <- read.csv("/Users/juliamaja/Desktop/SV/SV_data_avg.csv")
library(ape)
library(corHMM)
library(phangorn)
library(stringr)
library(here)
library(rotl)
library(ggtree)
library(gsheet)
library(dplyr)
library(phytools)
library(geiger)
library(ggplot2)
library(rphylopic)
library(RColorBrewer)
library(ggimage)
library(rfishbase)
library(rentrez)
library(taxize)
library(rotl)
library(ggtree)
library(stringr)
library(scales)
library(gsheet)
library(ape)
library(patchwork)
library(ggpubr)
library(xlsx)
library(geiger)
library(here)
source("/Users/juliamaja/Desktop/SV/SV_data_avg.csv")
SV_data_avg <- read.csv("/Users/juliamaja/Desktop/SV/SV_data_avg.csv")
SV_data_avg <- read.csv("/Users/juliamaja/Desktop/SV/SV_data_avg.csv")
source("/Users/juliamaja/Desktop/SV/SV_data_avg.csv")
SV_data_avg <- read.csv("/Users/juliamaja/Desktop/SV/SV_data_avg.csv")
resolved_names <- SV_data_avg
# SV presence/ absence
tr <- tol_induced_subtree(ott_ids = resolved_names$ott_id[resolved_names$flags %in% c("sibling_higher", "")], label_format = "id")
tr <- multi2di(tr)
resolved_names$ott_id <- paste("ott", resolved_names$ott_id, sep = "")
reference.df <- resolved_names[resolved_names$ott_id %in% tr$tip.label,c("Order", "Family", "Genus", "Species", "tips", "ott_id")]
colnames(reference.df) <- c("Order", "Family", "Genus", "Species", "tips_species", "tips")
rownames(reference.df) <- reference.df$tips
# some are duplicated, or have missing data, remove them
reference.df <- reference.df[!duplicated(reference.df$Species),]
reference.df <- reference.df[!is.na(reference.df$Species),]
saveRDS(reference.df, "/Users/juliamaja/Desktop/SV/reference_df.rds")
saveRDS(tr, "/Users/juliamaja/Desktop/SV/tol_induced_tree.rds")
reference.df <- readRDS("/Users/juliamaja/Desktop/SV/reference_df.rds")
tr <- readRDS("/Users/juliamaja/Desktop/SV/tol_induced_tree.rds")
timetree_order <- ape::read.tree("/Users/juliamaja/Desktop/SV/timetree_data/actinopterygii_order.nwk")
timetree_family <- ape::read.tree("/Users/juliamaja/Desktop/SV/timetree_data/actinopterygii_family.nwk")
timetree_genus <- ape::read.tree("/Users/juliamaja/Desktop/SV/timetree_data/actinopterygii_genus.nwk")
geiger.order <- congruify.phylo(reference = timetree_order, target = tr, taxonomy = reference.df, tol = 0, scale = "treePL")
geiger.order <- congruify.phylo(reference = timetree_order, target = tr, taxonomy = reference.df, tol = 0, scale = "treePL")
install.packages("treePL")
View(SV_data_avg)
SV_data_avg <- read.csv("/Users/juliamaja/Desktop/SV/SV_data_avg.csv")
resolved_names <- SV_data_avg
# SV presence/ absence
tr <- tol_induced_subtree(ott_ids = resolved_names$ott_id[resolved_names$flags %in% c("sibling_higher", "")], label_format = "id")
tr <- multi2di(tr)
tr$tip.label <- resolved_names$tips[match(tr$tip.label, paste("ott", resolved_names$ott_id, sep = ""))]
View(tr)
ggtree(tr, layout = "circular") + geom_tiplab(color = "black", size = 1.5)
sv_palette <- c("oldlace", "#FEEBE2", "#FBB4B9", "#F768A1", "#C51B8A", "#7A0177", "slateblue")
sv.plot <- ggtree(tr, layout = "circular") %<+% SV_data_avg[, c("tips", "presence", "genome.assembly")]
sv.plot <- sv.plot + geom_tile(data = sv.plot$data[1:length(tr$tip.label),], aes(y=y, x=x, fill = presence), inherit.aes = FALSE, color = "transparent") + scale_fill_brewer(palette = "RdPu")
sv.plot <- sv.plot + geom_tile(data = sv.plot$data[1:length(tr$tip.label),], aes(y=y, x=x+15, fill = genome.assembly), inherit.aes = FALSE, color = "transparent") + scale_fill_manual(values = sv_palette)
sv.plot <- sv.plot + geom_tiplab(hjust = -0.2, size = 1.5)
sv.plot
tr <- tol_induced_subtree(ott_ids = SV_data$ott_id[SV_data$flags %in% c("sibling_higher", "")], label_format = "id")
# tree building for SV complexity:
SV_data <- SV_data_avg
tr <- tol_induced_subtree(ott_ids = SV_data$ott_id[SV_data$flags %in% c("sibling_higher", "")], label_format = "id")
tr <- multi2di(tr)
tr$tip.label <- SV_data$tips[match(tr$tip.label, paste("ott", SV_data$ott_id, sep = ""))]
ggtree(tr, layout = "circular") + geom_tiplab(color = "black", size = 1.5)
sv_palette <- c("oldlace", "#FEEBE2", "#FBB4B9", "#F768A1", "#C51B8A", "#7A0177", "slateblue")
sv.plot <- ggtree(tr, layout = "circular") %<+% SV_data[, c("tips", "SV", "genome.assembly")]
sv.plot <- sv.plot + geom_tile(data = sv.plot$data[1:length(tr$tip.label),], aes(y=y, x=x, fill = SV), inherit.aes = FALSE, color = "transparent") + scale_fill_brewer(palette = "RdPu")
sv.plot <- sv.plot + geom_tile(data = sv.plot$data[1:length(tr$tip.label),], aes(y=y, x=x+15, fill = genome.assembly), inherit.aes = FALSE, color = "transparent") + scale_fill_brewer(palette = "RdPu")
sv.plot <- sv.plot + geom_tiplab(hjust = -0.2, size = 1.5)
sv.plot
View(SV_data_avg)
SV_data <- SV_data_avg
SV <- SV3
SV_data <- SV_data_avg
tr <- tol_induced_subtree(ott_ids = SV_data$ott_id[SV_data$flags %in% c("sibling_higher", "")], label_format = "id")
tr <- multi2di(tr)
tr$tip.label <- SV_data$tips[match(tr$tip.label, paste("ott", SV_data$ott_id, sep = ""))]
ggtree(tr, layout = "circular") + geom_tiplab(color = "black", size = 1.5)
sv_palette <- c("oldlace", "#FEEBE2", "#FBB4B9", "#F768A1", "#C51B8A", "#7A0177", "slateblue")
sv.plot <- ggtree(tr, layout = "circular") %<+% SV_data[, c("tips", "SV3", "genome.assembly")]
sv.plot <- sv.plot + geom_tile(data = sv.plot$data[1:length(tr$tip.label),], aes(y=y, x=x, fill = SV3), inherit.aes = FALSE, color = "transparent") + scale_fill_brewer(palette = "RdPu")
sv.plot <- sv.plot + geom_tile(data = sv.plot$data[1:length(tr$tip.label),], aes(y=y, x=x+15, fill = genome.assembly), inherit.aes = FALSE, color = "transparent") + scale_fill_brewer(palette = "RdPu")
sv.plot <- sv.plot + geom_tiplab(hjust = -0.2, size = 1.5)
sv.plot
sv_palette <- c("oldlace", "#FEEBE2", "#FBB4B9", "#F768A1", "#C51B8A", "#7A0177", "slateblue")
sv.plot <- ggtree(tr, layout = "circular") %<+% SV_data[, c("tips", "SV3", "genome.assembly")]
sv.plot <- sv.plot + geom_tile(data = sv.plot$data[1:length(tr$tip.label),], aes(y=y, x=x, fill = SV3), inherit.aes = FALSE, color = "transparent") + scale_fill_manual(values = sv_palette)
sv.plot <- sv.plot + geom_tile(data = sv.plot$data[1:length(tr$tip.label),], aes(y=y, x=x+15, fill = genome.assembly), inherit.aes = FALSE, color = "transparent") + scale_fill_manual(values = sv_palette)
sv.plot <- sv.plot + geom_tiplab(hjust = -0.2, size = 1.5)
sv.plot
sv_palette <- c("oldlace", "#FEEBE2", "#FBB4B9", "#F768A1", "#C51B8A", "#7A0177", "slateblue")
sv.plot <- ggtree(tr, layout = "circular") %<+% SV_data[, c("tips", "SV3", "genome.assembly")]
sv.plot <- sv.plot + geom_tile(data = sv.plot$data[1:length(tr$tip.label),], aes(y=y, x=x, fill = SV3), inherit.aes = FALSE, color = "transparent") #+ scale_fill_manual(values = sv_palette)
sv.plot <- sv.plot + geom_tile(data = sv.plot$data[1:length(tr$tip.label),], aes(y=y, x=x+15, fill = genome.assembly), inherit.aes = FALSE, color = "transparent") #+ scale_fill_manual(values = sv_palette)
sv.plot <- sv.plot + geom_tiplab(hjust = -0.2, size = 1.5)
sv.plot
View(SV_data)
sv.plot <- ggtree(tr, layout = "circular") %<+% SV_data[, c("tips", "SV3", "genome.assembly")]
sv.plot <- sv.plot + geom_tile(data = sv.plot$data[1:length(tr$tip.label),], aes(y=y, x=x, fill = SV3), inherit.aes = FALSE, color = "transparent") + scale_fill_brewer(palette = "RdPu")
sv.plot <- sv.plot + geom_tile(data = sv.plot$data[1:length(tr$tip.label),], aes(y=y, x=x+15, fill = genome.assembly), inherit.aes = FALSE, color = "transparent") + scale_fill_brewer(palette = "RdPu")
sv.plot <- sv.plot + geom_tiplab(hjust = -0.2, size = 1.5)
sv.plot
scale_fill_brewer(palette = "RdPu")
display.brewer.all(type = "all")
sv.plot <- ggtree(tr, layout = "circular") %<+% SV_data[, c("tips", "SV3", "genome.assembly")]
sv.plot <- sv.plot + geom_tile(data = sv.plot$data[1:length(tr$tip.label),], aes(y=y, x=x, fill = SV3), inherit.aes = FALSE, color = "transparent") + scale_color_gradient()
sv.plot <- sv.plot + geom_tile(data = sv.plot$data[1:length(tr$tip.label),], aes(y=y, x=x+15, fill = genome.assembly), inherit.aes = FALSE, color = "transparent") + scale_color_gradient()
sv.plot <- sv.plot + geom_tiplab(hjust = -0.2, size = 1.5)
sv.plot
sv.plot <- ggtree(tr, layout = "circular") %<+% SV_data[, c("tips", "SV3", "genome.assembly")]
sv.plot <- sv.plot + geom_tile(data = sv.plot$data[1:length(tr$tip.label),], aes(y=y, x=x, fill = SV3), inherit.aes = FALSE, color = "transparent") + scale_color_distiller()
sv.plot <- sv.plot + geom_tile(data = sv.plot$data[1:length(tr$tip.label),], aes(y=y, x=x+15, fill = genome.assembly), inherit.aes = FALSE, color = "transparent") + scale_color_distiller()
sv.plot <- sv.plot + geom_tiplab(hjust = -0.2, size = 1.5)
sv.plot
sv.plot <- ggtree(tr, layout = "circular") %<+% SV_data[, c("tips", "SV3", "genome.assembly")]
sv.plot <- sv.plot + geom_tile(data = sv.plot$data[1:length(tr$tip.label),], aes(y=y, x=x, fill = SV3), inherit.aes = FALSE, color = "transparent") + scale_color_gradient(name = waiver(),
...,
low = "#132B43",
high = "#56B1F7",
space = "Lab",
na.value = "grey50",
guide = "colourbar",
aesthetics = "fill")
sv.plot <- ggtree(tr, layout = "circular") %<+% SV_data[, c("tips", "SV3", "genome.assembly")]
sv.plot <- sv.plot + geom_tile(data = sv.plot$data[1:length(tr$tip.label),], aes(y=y, x=x, fill = SV3), inherit.aes = FALSE, color = "transparent") + scale_color_gradient()
sv.plot <- sv.plot + geom_tile(data = sv.plot$data[1:length(tr$tip.label),], aes(y=y, x=x+15, fill = genome.assembly), inherit.aes = FALSE, color = "transparent") + scale_color_gradient(low = "white", high = "black")
sv.plot <- sv.plot + geom_tiplab(hjust = -0.2, size = 1.5)
sv.plot
sv.plot <- ggtree(tr, layout = "circular") %<+% SV_data[, c("tips", "SV3", "genome.assembly")]
sv.plot <- sv.plot + geom_tile(data = sv.plot$data[1:length(tr$tip.label),], aes(y=y, x=x, fill = SV3), inherit.aes = FALSE, color = "transparent") + scale_color_gradient(low = "white", high = "black")
#sv.plot <- sv.plot + geom_tile(data = sv.plot$data[1:length(tr$tip.label),], aes(y=y, x=x+15, fill = genome.assembly), inherit.aes = FALSE, color = "transparent") + scale_color_gradient(low = "white", high = "black")
sv.plot <- sv.plot + geom_tiplab(hjust = -0.2, size = 1.5)
sv.plot
sv.plot <- ggtree(tr, layout = "circular") %<+% SV_data[, c("tips", "SV3", "genome.assembly")]
sv.plot <- sv.plot + geom_tile(data = sv.plot$data[1:length(tr$tip.label),], aes(y=y, x=x, fill = SV3), inherit.aes = FALSE, color = "transparent") + scale_color_gradient(low = "black", high = "white")
#sv.plot <- sv.plot + geom_tile(data = sv.plot$data[1:length(tr$tip.label),], aes(y=y, x=x+15, fill = genome.assembly), inherit.aes = FALSE, color = "transparent") + scale_color_gradient(low = "white", high = "black")
sv.plot <- sv.plot + geom_tiplab(hjust = -0.2, size = 1.5)
sv.plot
sv.plot <- ggtree(tr, layout = "circular") %<+% SV_data[, c("tips", "SV3", "genome.assembly")]
sv.plot <- sv.plot + geom_tile(data = sv.plot$data[1:length(tr$tip.label),], aes(y=y, x=x, fill = SV3), inherit.aes = FALSE, color = "transparent") + scale_color_gradient()
#sv.plot <- sv.plot + geom_tile(data = sv.plot$data[1:length(tr$tip.label),], aes(y=y, x=x+15, fill = genome.assembly), inherit.aes = FALSE, color = "transparent") + scale_color_gradient(low = "white", high = "black")
sv.plot <- sv.plot + geom_tiplab(hjust = -0.2, size = 1.5)
sv.plot
sv.plot <- ggtree(tr, layout = "circular") %<+% SV_data[, c("tips", "SV3", "genome.assembly")]
sv.plot <- sv.plot + geom_tile(data = sv.plot$data[1:length(tr$tip.label),], aes(y=y, x=x, fill = SV3), inherit.aes = FALSE, color = "transparent") + scale_color_gradient(low = "yellow", high = "red", na.value = NA)
#sv.plot <- sv.plot + geom_tile(data = sv.plot$data[1:length(tr$tip.label),], aes(y=y, x=x+15, fill = genome.assembly), inherit.aes = FALSE, color = "transparent") + scale_color_gradient(low = "white", high = "black")
sv.plot <- sv.plot + geom_tiplab(hjust = -0.2, size = 1.5)
sv.plot
sv.plot <- ggtree(tr, layout = "circular") %<+% SV_data[, c("tips", "SV3", "genome.assembly")]
sv.plot <- sv.plot + geom_tile(data = sv.plot$data[1:length(tr$tip.label),], aes(y=y, x=x, fill = SV3), inherit.aes = FALSE, color = "transparent") + scale_colour_gradient(low = "yellow", high = "red", na.value = NA)
#sv.plot <- sv.plot + geom_tile(data = sv.plot$data[1:length(tr$tip.label),], aes(y=y, x=x+15, fill = genome.assembly), inherit.aes = FALSE, color = "transparent") + scale_color_gradient(low = "white", high = "black")
sv.plot <- sv.plot + geom_tiplab(hjust = -0.2, size = 1.5)
sv.plot
sv.plot <- ggtree(tr, layout = "circular") %<+% SV_data[, c("tips", "SV3", "genome.assembly")]
sv.plot <- sv.plot + geom_tile(data = sv.plot$data[1:length(tr$tip.label),], aes(y=y, x=x, fill = SV3), inherit.aes = FALSE, color = "transparent") + scale_fill_gradient(low = "yellow", high = "red", na.value = NA)
#sv.plot <- sv.plot + geom_tile(data = sv.plot$data[1:length(tr$tip.label),], aes(y=y, x=x+15, fill = genome.assembly), inherit.aes = FALSE, color = "transparent") + scale_color_gradient(low = "white", high = "black")
sv.plot <- sv.plot + geom_tiplab(hjust = -0.2, size = 1.5)
sv.plot
sv.plot <- ggtree(tr, layout = "circular") %<+% SV_data[, c("tips", "SV3", "genome.assembly")]
sv.plot <- sv.plot + geom_tile(data = sv.plot$data[1:length(tr$tip.label),], aes(y=y, x=x, fill = SV3), inherit.aes = FALSE, color = "transparent") + scale_fill_gradient(low = "black", high = "pink", na.value = NA)
#sv.plot <- sv.plot + geom_tile(data = sv.plot$data[1:length(tr$tip.label),], aes(y=y, x=x+15, fill = genome.assembly), inherit.aes = FALSE, color = "transparent") + scale_color_gradient(low = "white", high = "black")
sv.plot <- sv.plot + geom_tiplab(hjust = -0.2, size = 1.5)
sv.plot
sv.plot <- ggtree(tr, layout = "circular") %<+% SV_data[, c("tips", "SV3", "genome.assembly")]
sv.plot <- sv.plot + geom_tile(data = sv.plot$data[1:length(tr$tip.label),], aes(y=y, x=x, fill = SV3), inherit.aes = FALSE, color = "transparent") + scale_fill_gradient(low = "tomato", high = "palegreen", na.value = NA)
#sv.plot <- sv.plot + geom_tile(data = sv.plot$data[1:length(tr$tip.label),], aes(y=y, x=x+15, fill = genome.assembly), inherit.aes = FALSE, color = "transparent") + scale_color_gradient(low = "white", high = "black")
sv.plot <- sv.plot + geom_tiplab(hjust = -0.2, size = 1.5)
sv.plot
tr <- tol_induced_subtree(ott_ids = resolved_names$ott_id[resolved_names$flags %in% c("sibling_higher", "")], label_format = "id")
tr <- multi2di(tr)
resolved_names$ott_id <- paste("ott", resolved_names$ott_id, sep = "")
tr <- readRDS("/Users/juliamaja/Desktop/SV/tol_induced_tree.rds")
timetree_order <- ape::read.tree("/Users/juliamaja/Desktop/SV/timetree_data/actinopterygii_order.nwk")
timetree_family <- ape::read.tree("/Users/juliamaja/Desktop/SV/timetree_data/actinopterygii_family.nwk")
timetree_genus <- ape::read.tree("/Users/juliamaja/Desktop/SV/timetree_data/actinopterygii_genus.nwk")
geiger.order <- congruify.phylo(reference = timetree_order, target = tr, taxonomy = reference.df, tol = 0, scale = "treePL")
sp_without_order <- SV_data_avg %>% filter(is.na(SV3))
View(sp_without_order)
sp_without_order <- SV_data_avg %>% filter(is.na(Order))
source("/Users/juliamaja/Desktop/SV/SV_data_avg.csv")
source("/Users/juliamaja/Desktop/SV/SV_data_avg.csv")
source("/Users/juliamaja/Desktop/SV/SV_data_avg.csv")
source("/Users/juliamaja/Desktop/SV/SV_functions.R")
sp_without_order <- sp_without_order %>% mutate(Order = ifelse(is.na(Order), purrr::map_chr(unique_name, get_order), Order))
get_order_ncbi("Diplomystes mesembrinus")
# filling in missing orders using fishbase --------------------------------
fishbase_species <- rfishbase::load_taxa()
View(fishbase_species)
sp_without_order <- sp_without_order %>% mutate(Order = ifelse(is.na(Order), purrr::map_chr(Species, get_order), Order))
Sp_without_order <- sp_without_order %>% mutate(Order = ifelse(is.na(Order), purrr::map_chr(Species, get_order), Order))
Sp_without_order <- sp_without_order %>% mutate(Order = ifelse(is.na(Order), purrr::map_chr(Species, get_order), Order))
Sp_without_order <- sp_without_order %>%
mutate(Order = ifelse(is.na(Order), purrr::map_chr(Species, get_order), Order))
Sp_without_order <- sp_without_order %>%
mutate(Order = purrr::map_chr(Species, get_order), Order))
Sp_without_order <- sp_without_order %>%
mutate(Order = purrr::map_chr(Species, get_order), Order)
sp_without_order <- sp_without_order %>% mutate(Order = ifelse(is.na(Order), purrr::map_chr(Species, get_order_ncbi), Order))
View(sp_without_order)
options(taxize_entrez_key = "ecfcbe684204381f87a6d00c9cb5c80a5a08")
get_family_ncbi <- function(species_name) {
tax_data <- classification(species_name, db = "ncbi")
tax_df <- tax_data[[1]]
if ( any(is.na(tax_data[[1]])) ) {
return(NA)
}
order_row <- which(tax_df$rank == "family")
if (length(order_row) > 0) {
tax_order <- tax_df[order_row, 1]
} else {
tax_order <- NA
}
return(tax_order)
}
get_family_ncbi("Ophichthus zophistius")
get_genus_ncbi("Ophichthus zophistius")
options(taxize_entrez_key = "ecfcbe684204381f87a6d00c9cb5c80a5a08")
get_genus_ncbi <- function(species_name) {
tax_data <- classification(species_name, db = "ncbi")
tax_df <- tax_data[[1]]
if ( any(is.na(tax_data[[1]])) ) {
return(NA)
}
order_row <- which(tax_df$rank == "genus")
if (length(order_row) > 0) {
tax_order <- tax_df[order_row, 1]
} else {
tax_order <- NA
}
return(tax_order)
}
get_genus_ncbi("Ophichthus zophistius")
sp_order <- read.csv("/Users/juliamaja/Desktop/SV/Species_order.csv")
View(sp_order)
sp_order_compare %>% left_join(fishbase_species, by = Species) %>% select("Species", "order", "Order")
sp_order_compare %>% sp_order %>% left_join(fishbase_species, by = Species) %>% select("Species", "order", "Order")
sp_order <- read.csv("/Users/juliamaja/Desktop/SV/Species_order.csv")
sp_order_compare %>% sp_order %>% left_join(fishbase_species, by = Species) %>% select("Species", "order", "Order")
sp_order_compare <- sp_order %>% left_join(fishbase_species, by = Species) %>% select("Species", "order", "Order")
sp_order_compare <- sp_order %>% left_join(fishbase_species, by = "Species") %>% select("Species", "order", "Order")
View(sp_order_compare)
sp_order_compare <- sp_order %>% left_join(fishbase_species, by = "Species") %>% select("Species", "order", "Order") %>% filter(order != Order)
View(sp_order_compare)
