df <- SV_sp_concordance[SV_sp_concordance$Species == species, ]
df$data_type <- make.unique(df$data_type)
return(df)
})
SV_sp_concordance <- Reduce(rbind, output)
SV_wide <- pivot_wider(SV_sp_concordance, names_from = "data_type", values_from = "presence")
SV_wide <- SV_wide %>% make_long(2:19)
ggplot(SV_wide, aes(x=x, next_x = next_x, fill = factor(node))) + geom_sankey() + theme_sankey(base_size = 16)
ggplot(SV_wide, aes(x=x, next_x = next_x, node = node, fill = factor(node))) + geom_sankey() + theme_sankey(base_size = 16)
ggplot(SV_wide, aes(x=x, next_x = next_x, node = node,  next_node = next_node, fill = factor(node))) + geom_sankey() + theme_sankey(base_size = 16)
SV_wide <- SV_wide %>% filter_at(vars(node, next_node), any_vars(!is.na(.)))
ggplot(SV_wide, aes(x=x, next_x = next_x, node = node,  next_node = next_node, fill = factor(node))) + geom_sankey() + theme_sankey(base_size = 16)
SV_sp_concordance <- read.csv("/Users/juliamaja/Desktop/SV/SV_sp_concordance.csv")
species_list <- table(SV_sp_concordance$Species)
species_list <- names(species_list[species_list >1])
output <- lapply(species_list, function(species){
df <- SV_sp_concordance[SV_sp_concordance$Species == species, ]
df$data_type <- make.unique(df$data_type)
return(df)
})
SV_sp_concordance <- Reduce(rbind, output)
SV_wide <- pivot_wider(SV_sp_concordance, names_from = "data_type", values_from = "presence")
# SV_wide <- SV_wide %>% make_long(2:19)
SV_wide <- SV_wide %>% make_long(c(*2,3,4,7))
# SV_wide <- SV_wide %>% make_long(2:19)
SV_wide <- SV_wide %>% make_long(c(2,3,4,7))
SV_wide <- SV_wide %>% filter_at(vars(node, next_node), any_vars(!is.na(.)))
ggplot(SV_wide, aes(x=x, next_x = next_x, node = node,  next_node = next_node, fill = factor(node))) + geom_sankey() + theme_sankey(base_size = 16)
SV_sp_concordance <- read.csv("/Users/juliamaja/Desktop/SV/SV_sp_concordance.csv")
species_list <- table(SV_sp_concordance$Species)
species_list <- names(species_list[species_list >1])
output <- lapply(species_list, function(species){
df <- SV_sp_concordance[SV_sp_concordance$Species == species, ]
df$data_type <- make.unique(df$data_type)
return(df)
})
SV_sp_concordance <- Reduce(rbind, output)
SV_wide <- pivot_wider(SV_sp_concordance, names_from = "data_type", values_from = "presence")
#all entires comparison
# SV_wide <- SV_wide %>% make_long(2:19)
#first instance of ventral, lateral, sagital or description source data
# SV_wide <- SV_wide %>% make_long(c(2,3,4,7))
#how well do all ventral agree
SV_wide <- SV_wide %>% make_long(c("ventral", "ventral.1", "ventral.2", "ventral.3"))
SV_sp_concordance <- read.csv("/Users/juliamaja/Desktop/SV/SV_sp_concordance.csv")
species_list <- table(SV_sp_concordance$Species)
species_list <- names(species_list[species_list >1])
output <- lapply(species_list, function(species){
df <- SV_sp_concordance[SV_sp_concordance$Species == species, ]
df$data_type <- make.unique(df$data_type)
return(df)
})
SV_sp_concordance <- Reduce(rbind, output)
SV_wide <- pivot_wider(SV_sp_concordance, names_from = "data_type", values_from = "presence")
#all entires comparison
# SV_wide <- SV_wide %>% make_long(2:19)
#first instance of ventral, lateral, sagital or description source data
# SV_wide <- SV_wide %>% make_long(c(2,3,4,7))
#how well do all ventral agree
SV_wide <- SV_wide %>% make_long(c("ventral", "ventral.1", "ventral.2", "ventral.3"))
SV_wide <- SV_wide %>% filter_at(vars(node, next_node), any_vars(!is.na(.)))
ggplot(SV_wide, aes(x=x, next_x = next_x, node = node,  next_node = next_node, fill = factor(node))) + geom_sankey() + theme_sankey(base_size = 16)
SV_sp_concordance <- read.csv("/Users/juliamaja/Desktop/SV/SV_sp_concordance.csv")
species_list <- table(SV_sp_concordance$Species)
species_list <- names(species_list[species_list >1])
output <- lapply(species_list, function(species){
df <- SV_sp_concordance[SV_sp_concordance$Species == species, ]
df$data_type <- make.unique(df$data_type)
return(df)
})
SV_sp_concordance <- Reduce(rbind, output)
SV_wide <- pivot_wider(SV_sp_concordance, names_from = "data_type", values_from = "presence")
SV_sp_concordance <- read.csv("/Users/juliamaja/Desktop/SV/SV_sp_concordance.csv")
species_list <- table(SV_sp_concordance$Species)
species_list <- names(species_list[species_list >1])
output <- lapply(species_list, function(species){
df <- SV_sp_concordance[SV_sp_concordance$Species == species, ]
df$data_type <- make.unique(df$data_type)
return(df)
})
SV_sp_concordance <- Reduce(rbind, output)
SV_wide <- pivot_wider(SV_sp_concordance, names_from = "data_type", values_from = "presence")
#all entires comparison
# SV_wide <- SV_wide %>% make_long(2:19)
#first instance of ventral, lateral, sagital or description source data
# SV_wide <- SV_wide %>% make_long(c(2,3,4,7))
#how well do all ventral agree
# SV_wide <- SV_wide %>% make_long(c("ventral", "ventral.1", "ventral.2", "ventral.3"))
SV_wide <- SV_wide %>% make_long(c("cross section", "description"))
SV_wide <- SV_wide %>% filter_at(vars(node, next_node), any_vars(!is.na(.)))
ggplot(SV_wide, aes(x=x, next_x = next_x, node = node,  next_node = next_node, fill = factor(node))) + geom_sankey() + theme_sankey(base_size = 16)
library(rotl)
library(stringr)
library(ape)
library(geiger)
getwd()
SV_data_avg <- read.csv("/Users/juliamaja/Desktop/SV/SV_data_avg.csv")
resolved_names <- SV_data_avg
# color palettes
rainbow_pal <- colorRampPalette(rainbow(7))(100)
set.seed(12)
random_colors <- distinctColorPalette(99)
P50 = c("#483d8b", "#3cb371", "#bc8f8f", "#bdb76b", "#008b8b", "#4682b4", "#d2691e",
"#F8C471", "#cd5c5c", "#00008b", "#32cd32", "#daa520", "#8fbc8f", "#8b008b",
"#9932cc", "#ff4500", "#ff8c00", "#ffd700", "#F9E79F", "#244fa4", "#BCBD22",
"#00fa9a", "#dc143c", "#00ffff", "#00bfff", "#0000ff", "#a020f0", "#adff2f",
"#ff6347", "#da70d6", "#d8bfd8", "#ff00ff", "#1e90ff", "#db7093", "#dda0dd",
"#add8e6", "#ff1493", "#7b68ee", "#ffa07a", "#98fb98", "#7fffd4", "#FCCDE5",
"#ff69b4", "#2f4f4f", "#556b2f", "#a0522d", "#006400",
"#708090", "#8b0000", "#A6D854"
)
P60 = c( "#000", "#a9a9a9", "#d3d3d3", "#2f4f4f", "#556b2f", "#6b8e23", "#a0522d",
"#2e8b57", "#228b22", "#800000", "#191970", "#006400", "#808000", "#483d8b",
"#b22222", "#5f9ea0", "#778899", "#3cb371", "#bc8f8f", "#663399", "#008080",
"#bdb76b", "#4682b4", "#d2691e", "#9acd32", "#20b2aa", "#cd5c5c", "#00008b",
"#4b0082", "#32cd32", "#daa520", "#7f007f", "#8fbc8f", "#b03060", "#d2b48c",
"#66cdaa", "#9932cc", "#ff0000", "#ff8c00", "#ffa500", "#ffd700", "#ffff00",
"#c71585", "#0000cd", "#40e0d0", "#7fff00", "#00ff00", "#ba55d3", "#00fa9a",
"#00ff7f", "#4169e1", "#dc143c", "#00ffff", "#00bfff", "#f4a460", "#9370db",
"#0000ff", "#a020f0", "#adff2f", "#ff6347", "#d8bfd8", "#b0c4de", "#ff00ff",
"#1e90ff", "#db7093", "#f0e68c", "#fa8072", "#ffff54", "#6495ed", "#dda0dd",
"#b0e0e6", "#90ee90", "#ff1493", "#7b68ee", "#ffa07a", "#f5deb3", "#ee82ee",
"#87cefa", "#7fffd4", "#ff69b4"
)
pres_abs <- c("red", "green")
# SV presence/ absence
SV_data <- SV_data_avg
tr <- tol_induced_subtree(ott_ids = SV_data$ott_id[SV_data$flags %in% c("sibling_higher", "")], label_format = "id")
tr <- multi2di(tr)
tr$tip.label <- SV_data$tips[match(tr$tip.label, paste("ott", SV_data$ott_id, sep = ""))]
View(resolved_names)
resolved_names$ott_id <- paste("ott", resolved_names$ott_id, sep = "")
reference.df <- resolved_names[resolved_names$ott_id %in% tr$tip.label,c("order", "family", "genus", "unique_name", "tips", "ott_id")]
reseolved_names <- resolved_names %>% rename("Genus", "genus")
library(ape)
library(corHMM)
library(phangorn)
library(stringr)
library(here)
library(rotl)
library(ggtree)
library(gsheet)
library(dplyr)
library(phytools)
library(geiger)
library(ggplot2)
library(rphylopic)
library(RColorBrewer)
library(ggimage)
library(rfishbase)
library(rentrez)
library(taxize)
reseolved_names <- resolved_names %>% rename("Genus", "genus")
reseolved_names <- resolved_names %>% rename("genus", "Genus")
reseolved_names <- resolved_names %>% rename("genus" = "Genus")
resolved_names <- resolved_names %>% rename("genus" = "Genus")
resolved_names <- resolved_names %>% rename("genus" = "Genus") %>% rename("family" = "Family") %>% rename("order" = "Order")
resolved_names <- resolved_names %>% rename("family" = "Family") %>% rename("order" = "Order")
reference.df <- resolved_names[resolved_names$ott_id %in% tr$tip.label,c("order", "family", "genus", "unique_name", "tips", "ott_id")]
resolved_names <- resolved_names %>% rename("unique_name" = "Species")
reference.df <- resolved_names[resolved_names$ott_id %in% tr$tip.label,c("order", "family", "genus", "unique_name", "tips", "ott_id")]
View(reference.df)
View(tr)
tr$tip.label
tr$Nnode
tr$node.label
# SV presence/ absence
SV_data <- SV_data_avg
tr <- tol_induced_subtree(ott_ids = SV_data$ott_id[SV_data$flags %in% c("sibling_higher", "")], label_format = "id")
tr <- multi2di(tr)
tr$tip.label <- SV_data$tips[match(tr$tip.label, paste("ott", SV_data$ott_id, sep = ""))]
View(tr)
tr$tip.label
tr <- tol_induced_subtree(ott_ids = SV_data$ott_id[SV_data$flags %in% c("sibling_higher", "")], label_format = "id")
View(tr)
View(tr)
reference.df <- resolved_names[resolved_names$ott_id %in% tr$tip.label,c("order", "family", "genus", "unique_name", "tips", "ott_id")]
colnames(reference.df) <- c("order", "family", "genus", "unique_name", "tips_species", "tips")
rownames(reference.df) <- reference.df$tips
# some are duplicated, or have missing data, remove them
reference.df <- reference.df[!duplicated(reference.df$unique_name),]
reference.df <- reference.df[!is.na(reference.df$unique_name),]
pwd
getwd()
timetree_order <- ape::read.tree("/Users/juliamaja/Desktop/SV/timetree_data/actinopterygii_order.nwk")
timetree_family <- ape::read.tree("/Users/juliamaja/Desktop/SV/timetree_data/actinopterygii_family.nwk")
timetree_genus <- ape::read.tree("/Users/juliamaja/Desktop/SV/timetree_data/actinopterygii_genus.nwk")
# Use geiger to congruify the tree, works with treePL
# This seems to work up to genus, but not species (by replacing tip.labels with the same names)
#setwd("/scicore/home/schiera/gizevo30/projects/fish_sleep/")
geiger.order <- congruify.phylo(reference = timetree_order, target = tr, taxonomy = reference.df, tol = 0, scale = "treePL")
system("treePL -h")
Sys.setenv(PATH = paste(Sys.getenv("PATH"), "/opt/homebrew/bin", sep = ":"))
# test treepl
system("treePL -h")
# Use geiger to congruify the tree, works with treePL
# This seems to work up to genus, but not species (by replacing tip.labels with the same names)
#setwd("/scicore/home/schiera/gizevo30/projects/fish_sleep/")
geiger.order <- congruify.phylo(reference = timetree_order, target = tr, taxonomy = reference.df, tol = 0, scale = "treePL")
timetree_family <- ape::read.tree("/Users/juliamaja/Desktop/SV/timetree_data/actinopterygii_family.nwk")
timetree_genus <- ape::read.tree("/Users/juliamaja/Desktop/SV/timetree_data/actinopterygii_genus.nwk")
View(timetree_order)
# Use geiger to congruify the tree, works with treePL
# This seems to work up to genus, but not species (by replacing tip.labels with the same names)
#setwd("/scicore/home/schiera/gizevo30/projects/fish_sleep/")
geiger.order <- congruify.phylo(reference = timetree_order, target = tr, taxonomy = reference.df, tol = 0, scale = "treePL")
#setwd("/scicore/home/schiera/gizevo30/projects/fish_sleep/")
geiger.family <- congruify.phylo(reference = timetree_family, target = geiger.order$phy, taxonomy = reference.df, tol = 0, scale = "treePL")
#setwd("/scicore/home/schiera/gizevo30/projects/fish_sleep/")
geiger.genus <- congruify.phylo(reference = timetree_genus, target = geiger.family$phy, taxonomy = reference.df, tol = 0, scale = "treePL")
#setwd("/scicore/home/schiera/gizevo30/projects/fish_sleep/")
geiger.genus <- congruify.phylo(reference = timetree_genus, target = geiger.family$phy, taxonomy = reference.df, tol = 0, scale = "treePL")
tr.calibrated <- geiger.genus$phy
tr.calibrated$tip.label <- resolved_names$tips[match(tr.calibrated$tip.label, resolved_names$ott_id)]
getwd()
saveRDS(tr.calibrated, file = "tr_tree_calibrated_8_25.rds")
View(tr.calibrated)
#trpy_n <- readRDS("/Users/juliamaja/Desktop/SV/fish_time_tree.rds")
trpy_n <- readRDS("/Users/juliamaja/Desktop/SV/tr_tree_calibrated_8_25.rds")
tr <- trpy_n
View(tr)
tr$tip.label
ER_model <- corHMM(phy = trpy_n, data = SV_data_avg[, c("tips", "presence")], rate.cat = 1, model = "ER", node.states = "marginal")
View(SV_data_avg)
trpy_n <- readRDS("/Users/juliamaja/Desktop/SV/fish_time_tree.rds")
tr <- trpy_n
ER_model <- corHMM(phy = trpy_n, data = SV_data_avg[, c("tips", "presence")], rate.cat = 1, model = "ER", node.states = "marginal")
View(trpy_n)
View(tree)
View(trpy_n)
View(tree)
tr <- trpy_n
trpy_n <- readRDS("/Users/juliamaja/Desktop/SV/tr_tree_calibrated_8_25.rds")
View(tr)
View(tr)
trpy_n <- readRDS("/Users/juliamaja/Desktop/SV/tr_tree_calibrated_8_25.rds")
tr <- trpy_n
# Below works if you modify the heights.phylo function
trace(geiger:::heights.phylo, edit = TRUE)
# Also have to do it manually - which is ugh!
timetree_species <- ape::read.tree("timetree_data/actinopterygii_species.nwk")
timetree_species <- multi2di(timetree_species)
resolved_names <- readRDS(file = "resolved_names.rds") #from the data cleaning script
View(resolved_names)
View(reseolved_names)
reference.df <- resolved_names[,c("order", "family", "genus", "unique_name", "tips", "ott_id")]
colnames(reference.df) <- c("order", "family", "genus", "unique_name", "tips_species", "tips")
rownames(reference.df) <- reference.df$tips
tr.calibrated <- readRDS("tr_tree_calibrated_8_25.rds")
tr.calibrated$tip.label <- reference.df$tips[match(tr.calibrated$tip.label, reference.df$tips_species)]
geiger.species <- congruify.phylo(reference = timetree_species, target = tr.calibrated, taxonomy = reference.df, tol = 0, scale = "treePL")
tr.calibrated <- geiger.species$phy
tr.calibrated$tip.label <- resolved_names$tips[match(tr.calibrated$tip.label, resolved_names$ott_id)]
saveRDS(tr.calibrated, file = "tr_tree_calibrated_8_25.rds")
trpy_n <- readRDS("/Users/juliamaja/Desktop/SV/tr_tree_calibrated_8_25.rds")
tr <- trpy_n
ER_model <- corHMM(phy = trpy_n, data = SV_data_avg[, c("tips", "presence")], rate.cat = 1, model = "ER", node.states = "marginal")
tr$tip.label
# presence/ absence of whole set with and without genome assembly
SV_data <- SV_data_avg
tr <- tol_induced_subtree(ott_ids = SV_data$ott_id[SV_data$flags %in% c("sibling_higher", "")], label_format = "id")
tr <- multi2di(tr)
tr$tip.label <- SV_data$tips[match(tr$tip.label, paste("ott", SV_data$ott_id, sep = ""))]
tr$tip.label
# tr <- readRDS("/Users/juliamaja/Downloads/tr_tree_calibrated_fish.rds")
tr <- readRDS("/Users/juliamaja/Desktop/SV/julia_fish_tree.rds")
SV_data_avg <- SV_data_avg[SV_data_avg$tips %in% tr$tip.label,] #%>% mutate( Species = str_replace(Species, "(species in domain Eukaryota)", "")) %>% mutate(Species = str_replace(Species, "_", "")) %>% mutate(tips = Species)
SV_data_avg <- read.csv("/Users/juliamaja/Desktop/SV/SV_data_avg.csv")
resolved_names <- SV_data_avg
# presence/ absence of whole set with and without genome assembly
SV_data <- SV_data_avg
tr <- tol_induced_subtree(ott_ids = SV_data$ott_id[SV_data$flags %in% c("sibling_higher", "")], label_format = "id")
tr <- multi2di(tr)
tr$tip.label
# SV presence/ absence + order  (genome assembly subset)
SV_data <- SV_data_avg %>% filter(genome.assembly == "y")
tr <- tol_induced_subtree(ott_ids = SV_data$ott_id[SV_data$flags %in% c("sibling_higher", "")], label_format = "id")
tr <- multi2di(tr)
tr$tip.label <- SV_data$tips[match(tr$tip.label, paste("ott", SV_data$ott_id, sep = ""))]
tr$tip.label
SV_data <- SV_data_avg %>% filter(genome.assembly == "y")
tr <- tol_induced_subtree(ott_ids = SV_data$ott_id[SV_data$flags %in% c("sibling_higher", "")], label_format = "id")
tr <- multi2di(tr)
tr$tip.label <- SV_data$tips[match(tr$tip.label, paste("ott", SV_data$ott_id, sep = ""))]
ggtree(tr, layout = "circular") + geom_tiplab(color = "black", size = 1.5)
sv.plot <- ggtree(tr, layout = "circular") %<+% SV_data[, c("tips", "presence", "genome.assembly", "Order")]
sv.plot <- sv.plot + geom_tile(data = sv.plot$data[!is.na(sv.plot$data$presence) & seq_len(nrow(sv.plot$data)) <= length(tr$tip.label), ], aes(y=y, x=x, fill = presence), inherit.aes = FALSE, color = "transparent") + scale_fill_manual(values = pres_abs)
sv.plot <- sv.plot + new_scale_fill() + geom_tile(data = sv.plot$data[1:length(tr$tip.label),], aes(y=y, x=x + 15, fill = Order), inherit.aes = FALSE, color = "transparent") + scale_fill_manual(values = P50)
# color palettes
rainbow_pal <- colorRampPalette(rainbow(7))(100)
set.seed(12)
random_colors <- distinctColorPalette(99)
SV_data <- SV_data_avg %>% filter(genome.assembly == "y")
tr <- tol_induced_subtree(ott_ids = SV_data$ott_id[SV_data$flags %in% c("sibling_higher", "")], label_format = "id")
tr <- multi2di(tr)
tr$tip.label <- SV_data$tips[match(tr$tip.label, paste("ott", SV_data$ott_id, sep = ""))]
ggtree(tr, layout = "circular") + geom_tiplab(color = "black", size = 1.5)
sv.plot <- ggtree(tr, layout = "circular") %<+% SV_data[, c("tips", "presence", "genome.assembly", "Order")]
sv.plot <- sv.plot + geom_tile(data = sv.plot$data[!is.na(sv.plot$data$presence) & seq_len(nrow(sv.plot$data)) <= length(tr$tip.label), ], aes(y=y, x=x, fill = presence), inherit.aes = FALSE, color = "transparent") + scale_fill_manual(values = pres_abs)
sv.plot <- sv.plot + new_scale_fill() + geom_tile(data = sv.plot$data[1:length(tr$tip.label),], aes(y=y, x=x + 15, fill = Order), inherit.aes = FALSE, color = "transparent") + scale_fill_manual(values = P50)
# Section 0: Packages -----------------------------------------------------
library(ape)
library(corHMM)
library(phangorn)
library(stringr)
library(here)
library(rotl)
library(ggtree)
library(gsheet)
library(dplyr)
library(phytools)
library(geiger)
library(ggplot2)
library(rphylopic)
library(RColorBrewer)
library(ggimage)
library(rfishbase)
library(rentrez)
library(taxize)
library(rotl)
library(ggtree)
library(stringr)
library(scales)
library(gsheet)
library(ape)
library(patchwork)
library(ggpubr)
#library(xlsx) # problem
library(geiger)
library(here)
library(ggtree)
library(randomcoloR)
library(ggnewscale)
library(svglite)
library(Polychrome)
library(rphylopic)
SV_data <- SV_data_avg %>% filter(genome.assembly == "y")
tr <- tol_induced_subtree(ott_ids = SV_data$ott_id[SV_data$flags %in% c("sibling_higher", "")], label_format = "id")
tr <- multi2di(tr)
tr$tip.label <- SV_data$tips[match(tr$tip.label, paste("ott", SV_data$ott_id, sep = ""))]
ggtree(tr, layout = "circular") + geom_tiplab(color = "black", size = 1.5)
sv.plot <- ggtree(tr, layout = "circular") %<+% SV_data[, c("tips", "presence", "genome.assembly", "Order")]
sv.plot <- sv.plot + geom_tile(data = sv.plot$data[!is.na(sv.plot$data$presence) & seq_len(nrow(sv.plot$data)) <= length(tr$tip.label), ], aes(y=y, x=x, fill = presence), inherit.aes = FALSE, color = "transparent") + scale_fill_manual(values = pres_abs)
sv.plot <- sv.plot + new_scale_fill() + geom_tile(data = sv.plot$data[1:length(tr$tip.label),], aes(y=y, x=x + 15, fill = Order), inherit.aes = FALSE, color = "transparent") + scale_fill_manual(values = P50)
sv.plot <- sv.plot + geom_tiplab(hjust = -0.2, size = 1.5)
sv.plot
SV_data <- SV_data_avg %>% filter(genome.assembly == "y")
SV_data <- SV_data_avg %>% filter(!is.na(SV3)) %>% mutate( Species = str_replace(Species, "(species in domain Eukaryota)", "")) %>% mutate(Species = str_replace(Species, "_", "")) %>% mutate(tips = Species)
tr <- tol_induced_subtree(ott_ids = SV_data$ott_id[SV_data$flags %in% c("sibling_higher", "")], label_format = "id")
tr <- multi2di(tr)
tr$tip.label <- SV_data$tips[match(tr$tip.label, paste("ott", SV_data$ott_id, sep = ""))]
ggtree(tr, layout = "circular") + geom_tiplab(color = "black", size = 1.5)
sv.plot <- ggtree(tr, layout = "circular") %<+% SV_data[, c("tips", "presence", "genome.assembly", "Order")]
sv.plot <- sv.plot + geom_tile(data = sv.plot$data[!is.na(sv.plot$data$presence) & seq_len(nrow(sv.plot$data)) <= length(tr$tip.label), ], aes(y=y, x=x, fill = presence), inherit.aes = FALSE, color = "transparent") + scale_fill_manual(values = pres_abs)
sv.plot <- sv.plot + new_scale_fill() + geom_tile(data = sv.plot$data[1:length(tr$tip.label),], aes(y=y, x=x + 15, fill = Order), inherit.aes = FALSE, color = "transparent") + scale_fill_manual(values = P50)
sv.plot <- sv.plot + geom_tiplab(hjust = -0.2, size = 1.5)
sv.plot
SV_data <- SV_data_avg %>% filter(genome.assembly == "y")
SV_data <- SV_data_avg %>% filter(!is.na(SV3)) %>% mutate( Species = str_replace(Species, "(species in domain Eukaryota)", "")) %>% mutate(Species = str_replace(Species, "_", "")) %>% mutate(tips = Species)
tr <- tol_induced_subtree(ott_ids = SV_data$ott_id[SV_data$flags %in% c("sibling_higher", "")], label_format = "id")
tr <- multi2di(tr)
tr$tip.label <- SV_data$tips[match(tr$tip.label, paste("ott", SV_data$ott_id, sep = ""))]
ggtree(tr, layout = "circular") + geom_tiplab(color = "black", size = 1.5)
sv.plot <- ggtree(tr, layout = "circular") %<+% SV_data[, c("tips", "presence", "genome.assembly", "Order")]
sv.plot <- sv.plot + geom_tile(data = sv.plot$data[!is.na(sv.plot$data$presence) & seq_len(nrow(sv.plot$data)) <= length(tr$tip.label), ], aes(y=y, x=x, fill = presence), inherit.aes = FALSE, color = "transparent") + scale_fill_manual(values = pres_abs)
sv.plot <- sv.plot + new_scale_fill() + geom_tile(data = sv.plot$data[1:length(tr$tip.label),], aes(y=y, x=x + 15, fill = Order), inherit.aes = FALSE, color = "transparent") + scale_fill_manual(values = P60)
sv.plot <- sv.plot + geom_tiplab(hjust = -0.2, size = 1.5)
sv.plot
tr$tip.label
# SV presence/ absence + order  (genome assembly subset)
SV_data <- SV_data_avg %>% filter(genome.assembly == "y")
SV_data <- SV_data_avg %>% filter(!is.na(SV3)) %>% mutate( Species = str_replace(Species, "(species in domain Eukaryota)", ""))
# SV presence/ absence + order  (genome assembly subset)
SV_data <- SV_data_avg %>% filter(genome.assembly == "y")
SV_data <- SV_data_avg %>% filter(!is.na(SV3)) %>% mutate( Species = str_replace(Species, "(species in domain Eukaryota)", ""))
# SV presence/ absence + order  (genome assembly subset)
SV_data <- SV_data_avg %>% filter(genome.assembly == "y")
SV_data <- SV_data %>% filter(!is.na(SV3)) %>% mutate( Species = str_replace(Species, "(species in domain Eukaryota)", ""))
View(SV_data)
# SV presence/ absence + order  (genome assembly subset)
SV_data <- SV_data_avg %>% filter(genome.assembly == "y")
SV_data <- SV_data %>% filter(!is.na(presence)) %>% mutate( Species = str_replace(Species, "(species in domain Eukaryota)", ""))
SV_data <- SV_data_avg %>% filter(genome.assembly == "y")
SV_data <- SV_data %>% filter(!is.na(presence)) %>% mutate( Species = str_replace(Species, "(species in domain Eukaryota)", ""))
tr <- tol_induced_subtree(ott_ids = SV_data$ott_id[SV_data$flags %in% c("sibling_higher", "")], label_format = "id")
tr <- multi2di(tr)
tr$tip.label <- SV_data$tips[match(tr$tip.label, paste("ott", SV_data$ott_id, sep = ""))]
ggtree(tr, layout = "circular") + geom_tiplab(color = "black", size = 1.5)
sv.plot <- ggtree(tr, layout = "circular") %<+% SV_data[, c("tips", "presence", "genome.assembly", "Order")]
sv.plot <- sv.plot + geom_tile(data = sv.plot$data[!is.na(sv.plot$data$presence) & seq_len(nrow(sv.plot$data)) <= length(tr$tip.label), ], aes(y=y, x=x, fill = presence), inherit.aes = FALSE, color = "transparent") + scale_fill_manual(values = pres_abs)
sv.plot <- sv.plot + new_scale_fill() + geom_tile(data = sv.plot$data[1:length(tr$tip.label),], aes(y=y, x=x + 15, fill = Order), inherit.aes = FALSE, color = "transparent") + scale_fill_manual(values = P60)
sv.plot <- sv.plot + geom_tiplab(hjust = -0.2, size = 1.5)
sv.plot
# SV presence/ absence + order  (genome assembly subset)
SV_data <- SV_data_avg %>% filter(genome.assembly == "y")
SV_data <- SV_data %>% filter(!is.na(presence)) %>% mutate( Species = str_replace(Species, "(species in domain Eukaryota)" = ""))
# SV presence/ absence + order  (genome assembly subset)
SV_data <- SV_data_avg %>% filter(genome.assembly == "y")
SV_data <- SV_data %>% filter(!is.na(presence)) %>% mutate( Species = str_replace(Species, "(species in domain Eukaryota)", ""))
tr <- tol_induced_subtree(ott_ids = SV_data$ott_id[SV_data$flags %in% c("sibling_higher", "")], label_format = "id")
tr <- multi2di(tr)
tr$tip.label <- SV_data$tips[match(tr$tip.label, paste("ott", SV_data$ott_id, sep = ""))]
ggtree(tr, layout = "circular") + geom_tiplab(color = "black", size = 1.5)
sv.plot <- ggtree(tr, layout = "circular") %<+% SV_data[, c("tips", "presence", "genome.assembly", "Order")]
sv.plot <- sv.plot + geom_tile(data = sv.plot$data[!is.na(sv.plot$data$presence) & seq_len(nrow(sv.plot$data)) <= length(tr$tip.label), ], aes(y=y, x=x, fill = presence), inherit.aes = FALSE, color = "transparent") + scale_fill_manual(values = pres_abs)
sv.plot <- sv.plot + new_scale_fill() + geom_tile(data = sv.plot$data[1:length(tr$tip.label),], aes(y=y, x=x + 15, fill = Order), inherit.aes = FALSE, color = "transparent") + scale_fill_manual(values = P60)
sv.plot <- sv.plot + geom_tiplab(hjust = -0.2, size = 1.5)
sv.plot
# SV presence/ absence + order  (genome assembly subset)
SV_data <- SV_data_avg %>% filter(genome.assembly == "y")
SV_data <- SV_data %>% filter(!is.na(presence)) %>% mutate( tips = str_replace(Species, "(species in domain Eukaryota)", ""))
tr <- tol_induced_subtree(ott_ids = SV_data$ott_id[SV_data$flags %in% c("sibling_higher", "")], label_format = "id")
tr <- multi2di(tr)
tr$tip.label <- SV_data$tips[match(tr$tip.label, paste("ott", SV_data$ott_id, sep = ""))]
ggtree(tr, layout = "circular") + geom_tiplab(color = "black", size = 1.5)
sv.plot <- ggtree(tr, layout = "circular") %<+% SV_data[, c("tips", "presence", "genome.assembly", "Order")]
sv.plot <- sv.plot + geom_tile(data = sv.plot$data[!is.na(sv.plot$data$presence) & seq_len(nrow(sv.plot$data)) <= length(tr$tip.label), ], aes(y=y, x=x, fill = presence), inherit.aes = FALSE, color = "transparent") + scale_fill_manual(values = pres_abs)
sv.plot <- sv.plot + new_scale_fill() + geom_tile(data = sv.plot$data[1:length(tr$tip.label),], aes(y=y, x=x + 15, fill = Order), inherit.aes = FALSE, color = "transparent") + scale_fill_manual(values = P60)
sv.plot <- sv.plot + geom_tiplab(hjust = -0.2, size = 1.5)
sv.plot
tr$tip.label
SV_data <- SV_data_avg
SV_data <- SV_data %>% filter(!is.na(presence)) %>% mutate( tips = str_replace(Species, "(species in domain Eukaryota)", ""))
tr <- tol_induced_subtree(ott_ids = SV_data$ott_id[SV_data$flags %in% c("sibling_higher", "")], label_format = "id")
tr <- multi2di(tr)
tr$tip.label <- SV_data$tips[match(tr$tip.label, paste("ott", SV_data$ott_id, sep = ""))]
ggtree(tr, layout = "circular") + geom_tiplab(color = "black", size = 0.8)
SV_data <- SV_data_avg
sv.plot <- ggtree(tr, layout = "circular") %<+% SV_data[, c("tips", "presence", "genome.assembly", "Order", "uuid")]
# presence/ absence of whole set with and without genome assembly
SV_data <- SV_data_avg
tr <- tol_induced_subtree(ott_ids = SV_data$ott_id[SV_data$flags %in% c("sibling_higher", "")], label_format = "id")
tr <- multi2di(tr)
tr$tip.label <- SV_data$tips[match(tr$tip.label, paste("ott", SV_data$ott_id, sep = ""))]
ggtree(tr, layout = "circular") + geom_tiplab(color = "black", size = 0.8)
SV_data <- SV_data_avg
sv.plot <- ggtree(tr, layout = "circular") %<+% SV_data[, c("tips", "presence", "genome.assembly", "Order", "uuid")]
# presence/ absence of whole set with and without genome assembly
SV_data <- SV_data_avg
tr <- tol_induced_subtree(ott_ids = SV_data$ott_id[SV_data$flags %in% c("sibling_higher", "")], label_format = "id")
tr <- multi2di(tr)
tr$tip.label <- SV_data$tips[match(tr$tip.label, paste("ott", SV_data$ott_id, sep = ""))]
tr$tip.label
ggtree(tr, layout = "circular") + geom_tiplab(color = "black", size = 0.8)
SV_data <- SV_data_avg
# presence/ absence of whole set with and without genome assembly
SV_data <- SV_data_avg
# presence/ absence of whole set with and without genome assembly
SV_data <- SV_data_avg
#SV_data <- SV_data %>% filter(!is.na(presence)) %>% mutate( tips = str_replace(Species, "(species in domain Eukaryota)", ""))
tr <- tol_induced_subtree(ott_ids = SV_data$ott_id[SV_data$flags %in% c("sibling_higher", "")], label_format = "id")
tr <- multi2di(tr)
tr$tip.label <- SV_data$tips[match(tr$tip.label, paste("ott", SV_data$ott_id, sep = ""))]
ggtree(tr, layout = "circular") + geom_tiplab(color = "black", size = 0.8)
sv.plot <- ggtree(tr, layout = "circular") %<+% SV_data[, c("tips", "presence", "genome.assembly", "Order", "uuid")]
SV_data <- SV_data_avg %>% filter(genome.assembly == "y")
SV_data <- SV_data %>% filter(!is.na(presence)) %>% mutate( tips = str_replace(Species, "(species in domain Eukaryota)", ""))
tr <- tol_induced_subtree(ott_ids = SV_data$ott_id[SV_data$flags %in% c("sibling_higher", "")], label_format = "id")
tr <- multi2di(tr)
tr$tip.label <- SV_data$tips[match(tr$tip.label, paste("ott", SV_data$ott_id, sep = ""))]
ggtree(tr, layout = "circular") + geom_tiplab(color = "black", size = 1.5)
sv.plot <- ggtree(tr, layout = "circular") %<+% SV_data[, c("tips", "presence", "genome.assembly", "Order")]
sv.plot <- sv.plot + geom_tile(data = sv.plot$data[!is.na(sv.plot$data$presence) & seq_len(nrow(sv.plot$data)) <= length(tr$tip.label), ], aes(y=y, x=x, fill = presence), inherit.aes = FALSE, color = "transparent") + scale_fill_manual(values = pres_abs)
sv.plot <- sv.plot + new_scale_fill() + geom_tile(data = sv.plot$data[1:length(tr$tip.label),], aes(y=y, x=x + 15, fill = Order), inherit.aes = FALSE, color = "transparent") + scale_fill_manual(values = P60)
sv.plot <- sv.plot + geom_tiplab(hjust = -0.2, size = 1.5)
sv.plot
# presence/ absence of whole set with and without genome assembly
SV_data <- SV_data_avg
tr <- tol_induced_subtree(ott_ids = SV_data$ott_id[SV_data$flags %in% c("sibling_higher", "")], label_format = "id")
tr <- multi2di(tr)
tr$tip.label <- SV_data$tips[match(tr$tip.label, paste("ott", SV_data$ott_id, sep = ""))]
ggtree(tr, layout = "circular") + geom_tiplab(color = "black", size = 1.5)
sv.plot <- ggtree(tr, layout = "circular") %<+% SV_data[, c("tips", "presence", "genome.assembly", "Order")]
sv.plot <- sv.plot + geom_tile(data = sv.plot$data[!is.na(sv.plot$data$presence) & seq_len(nrow(sv.plot$data)) <= length(tr$tip.label), ], aes(y=y, x=x, fill = presence), inherit.aes = FALSE, color = "transparent") + scale_fill_manual(values = pres_abs)
sv.plot <- sv.plot + new_scale_fill() + geom_tile(data = sv.plot$data[1:length(tr$tip.label),], aes(y=y, x=x + 15, fill = Order), inherit.aes = FALSE, color = "transparent") + scale_fill_manual(values = P60)
sv.plot <- sv.plot + geom_tiplab(hjust = -0.2, size = 1.5)
sv.plot
tr$tip.label
SV_data <- SV_data_avg #%>% filter(genome.assembly == "y")
SV_data <- SV_data %>% filter(!is.na(presence)) %>% mutate( tips = str_replace(Species, "(species in domain Eukaryota)", ""))
tr <- tol_induced_subtree(ott_ids = SV_data$ott_id[SV_data$flags %in% c("sibling_higher", "")], label_format = "id")
tr <- multi2di(tr)
tr$tip.label <- SV_data$tips[match(tr$tip.label, paste("ott", SV_data$ott_id, sep = ""))]
ggtree(tr, layout = "circular") + geom_tiplab(color = "black", size = 1.5)
sv.plot <- ggtree(tr, layout = "circular") %<+% SV_data[, c("tips", "presence", "genome.assembly", "Order")]
sv.plot <- sv.plot + geom_tile(data = sv.plot$data[!is.na(sv.plot$data$presence) & seq_len(nrow(sv.plot$data)) <= length(tr$tip.label), ], aes(y=y, x=x, fill = presence), inherit.aes = FALSE, color = "transparent") + scale_fill_manual(values = pres_abs)
sv.plot <- sv.plot + new_scale_fill() + geom_tile(data = sv.plot$data[1:length(tr$tip.label),], aes(y=y, x=x + 15, fill = Order), inherit.aes = FALSE, color = "transparent") + scale_fill_manual(values = P60)
sv.plot <- sv.plot + geom_tiplab(hjust = -0.2, size = 1.5)
sv.plot
tr <- tol_induced_subtree(ott_ids = SV_data$ott_id[SV_data$flags %in% c("sibling_higher", "")], label_format = "id")
tr$tip.label
View(otol_names)
sv_palette <- c("black", "transparent")
SV_data <- SV_data_avg %>% filter(!is.na(SV3)) %>% mutate( Species = str_replace(Species, "(species in domain Eukaryota)", "")) %>% mutate(Species = str_replace(Species, "_", "")) %>% mutate(tips = Species)
tr <- tol_induced_subtree(ott_ids = SV_data$ott_id[SV_data$flags %in% c("sibling_higher", "")], label_format = "id")
sv_palette <- c("black", "transparent")
SV_data <- SV_data_avg %>% filter(!is.na(SV3)) %>% mutate( Species = str_replace(Species, "(species in domain Eukaryota)", "")) %>% mutate(Species = str_replace(Species, "_", "")) %>% mutate(tips = Species)
tr <- tol_induced_subtree(ott_ids = SV_data$ott_id[SV_data$flags %in% c("sibling_higher", "")], label_format = "id")
# tree building for SV complexity + orders:
sv_palette <- c("black", "transparent")
SV_data <- SV_data_avg %>% filter(!is.na(SV3)) %>% mutate( Species = str_replace(Species, "(species in domain Eukaryota)", "")) %>% mutate(Species = str_replace(Species, "_", "")) %>% mutate(tips = Species)
tr <- tol_induced_subtree(ott_ids = SV_data$ott_id[SV_data$flags %in% c("sibling_higher", "")], label_format = "id")
SV_data <- SV_data_avg #%>% filter(genome.assembly == "y")
SV_data <- SV_data %>% filter(!is.na(presence)) %>% mutate( tips = str_replace(Species, "(species in domain Eukaryota)", ""))
tr <- tol_induced_subtree(ott_ids = SV_data$ott_id[SV_data$flags %in% c("sibling_higher", "")], label_format = "id")
# Section 0: Packages -----------------------------------------------------
library(ape)
library(rotl)
# SV presence/ absence + order  (genome assembly subset)
SV_data <- SV_data_avg #%>% filter(genome.assembly == "y")
SV_data <- SV_data %>% filter(!is.na(presence)) %>% mutate( tips = str_replace(Species, "(species in domain Eukaryota)", ""))
tr <- tol_induced_subtree(ott_ids = SV_data$ott_id[SV_data$flags %in% c("sibling_higher", "")], label_format = "id")
