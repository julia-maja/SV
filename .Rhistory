sv.plot <- ggtree(tr, layout = "circular") %<+% SV_data[, c("tips", "SV3", "presence", "genome.assembly")]
sv.plot <- sv.plot + geom_tile(data = sv.plot$data[1:length(tr$tip.label),], aes(y=y, x=x, fill = SV3), inherit.aes = FALSE, color = "transparent") + scale_fill_gradient(low = "tomato", high = "palegreen", na.value = NA)
#new_scale_color() + geom_tile(data = sv.plot$data[1:length(tr$tip.label),], aes(y=y, x=x, fill = presence), inherit.aes = FALSE, color = "transparent") + scale_fill_manual(values = sv_palette)
sv.plot <- sv.plot + geom_tiplab(hjust = -0.2, size = 1.5)
sv.plot
sv_palette <- c("black", "transparent")
SV_data <- SV_data_avg %>% filter(!is.na(SV3))
tr <- tol_induced_subtree(ott_ids = SV_data$ott_id[SV_data$flags %in% c("sibling_higher", "")], label_format = "id")
tr <- multi2di(tr)
tr$tip.label <- SV_data$tips[match(tr$tip.label, paste("ott", SV_data$ott_id, sep = ""))]
ggtree(tr, layout = "circular") + geom_tiplab(color = "black", size = 1.5)
sv.plot <- ggtree(tr, layout = "circular") %<+% SV_data[, c("tips", "SV3", "presence", "genome.assembly")]
sv.plot <- sv.plot + geom_tile(data = sv.plot$data[1:length(tr$tip.label),], aes(y=y, x=x, fill = SV3), inherit.aes = FALSE, color = "transparent") + scale_fill_gradient(name = "SV complexiity", low = "tomato", high = "palegreen", na.value = NA)
#new_scale_color() + geom_tile(data = sv.plot$data[1:length(tr$tip.label),], aes(y=y, x=x, fill = presence), inherit.aes = FALSE, color = "transparent") + scale_fill_manual(values = sv_palette)
sv.plot <- sv.plot + geom_tiplab(hjust = -0.2, size = 1.5)
sv.plot
filename <- "/Users/juliamaja/Desktop/SV/sv_complexity.svg"
ggsave(sv.plot, filename, device = "svg")
file_name <- "/Users/juliamaja/Desktop/SV/sv_complexity.svg"
ggsave(sv.plot, file_name, device = "svg")
ggsave(sv.plot, "/Users/juliamaja/Desktop/SV/sv_complexity.svg", device = "svg")
file_name <- "/Users/juliamaja/Desktop/SV/sv_complexity.svg"
ggsave(file_name, sv.plot, device = "svg")
install.packages(svglite)
install.packages("svglite")
library(svglite)
ggsave(file_name, sv.plot, device = "svg")
ggsave("/Users/juliamaja/Desktop/SV/ARD_reconstruction", ancestral_plot, devide = "svg")
ggsave("/Users/juliamaja/Desktop/SV/ARD_reconstruction", ancestral_plot, device = "svg")
sv_palette <- c("black", "transparent")
SV_data <- SV_data_avg %>% filter(!is.na(SV3)) %>% mutate(Species, " (species in domain Eukaryota)", "") %>% mutate(Species, "_", " ")
tr <- tol_induced_subtree(ott_ids = SV_data$ott_id[SV_data$flags %in% c("sibling_higher", "")], label_format = "id")
tr <- multi2di(tr)
tr$tip.label <- SV_data$tips[match(tr$tip.label, paste("ott", SV_data$ott_id, sep = ""))]
ggtree(tr, layout = "circular") + geom_tiplab(color = "black", size = 1.5)
sv.plot <- ggtree(tr, layout = "circular") %<+% SV_data[, c("tips", "SV3", "presence", "genome.assembly")]
sv.plot <- sv.plot + geom_tile(data = sv.plot$data[1:length(tr$tip.label),], aes(y=y, x=x, fill = SV3), inherit.aes = FALSE, color = "transparent") + scale_fill_gradient(name = "SV complexiity", low = "tomato", high = "palegreen", na.value = NA)
#new_scale_color() + geom_tile(data = sv.plot$data[1:length(tr$tip.label),], aes(y=y, x=x, fill = presence), inherit.aes = FALSE, color = "transparent") + scale_fill_manual(values = sv_palette)
sv.plot <- sv.plot + geom_tiplab(hjust = -0.2, size = 1.5)
sv.plot
SV_data <- SV_data_avg %>% filter(!is.na(SV3)) %>% mutate( Species = str_replace(Species, " (species in domain Eukaryota)", "")) %>% mutate(Species = str_replace(Species, "_", " ")) %>% mutate(tips)
View(SV_data)
tr <- tol_induced_subtree(ott_ids = SV_data$ott_id[SV_data$flags %in% c("sibling_higher", "")], label_format = "id")
tr <- multi2di(tr)
tr$tip.label <- SV_data$tips[match(tr$tip.label, paste("ott", SV_data$ott_id, sep = ""))]
ggtree(tr, layout = "circular") + geom_tiplab(color = "black", size = 1.5)
sv.plot <- ggtree(tr, layout = "circular") %<+% SV_data[, c("tips", "SV3", "presence", "genome.assembly")]
sv.plot <- sv.plot + geom_tile(data = sv.plot$data[1:length(tr$tip.label),], aes(y=y, x=x, fill = SV3), inherit.aes = FALSE, color = "transparent") + scale_fill_gradient(name = "SV complexiity", low = "tomato", high = "palegreen", na.value = NA)
#new_scale_color() + geom_tile(data = sv.plot$data[1:length(tr$tip.label),], aes(y=y, x=x, fill = presence), inherit.aes = FALSE, color = "transparent") + scale_fill_manual(values = sv_palette)
sv.plot <- sv.plot + geom_tiplab(hjust = -0.2, size = 1.5)
sv.plot
SV_data <- SV_data_avg %>% filter(!is.na(SV3)) %>% mutate( Species = str_replace(Species, " (species in domain Eukaryota)", "")) %>% mutate(Species = str_replace(Species, "_", " ")) %>% mutate(tips = Species)
tr <- tol_induced_subtree(ott_ids = SV_data$ott_id[SV_data$flags %in% c("sibling_higher", "")], label_format = "id")
tr <- multi2di(tr)
tr$tip.label <- SV_data$tips[match(tr$tip.label, paste("ott", SV_data$ott_id, sep = ""))]
ggtree(tr, layout = "circular") + geom_tiplab(color = "black", size = 1.5)
sv.plot <- ggtree(tr, layout = "circular") %<+% SV_data[, c("tips", "SV3", "presence", "genome.assembly")]
sv.plot <- sv.plot + geom_tile(data = sv.plot$data[1:length(tr$tip.label),], aes(y=y, x=x, fill = SV3), inherit.aes = FALSE, color = "transparent") + scale_fill_gradient(name = "SV complexiity", low = "tomato", high = "palegreen", na.value = NA)
#new_scale_color() + geom_tile(data = sv.plot$data[1:length(tr$tip.label),], aes(y=y, x=x, fill = presence), inherit.aes = FALSE, color = "transparent") + scale_fill_manual(values = sv_palette)
sv.plot <- sv.plot + geom_tiplab(hjust = -0.2, size = 1.5)
sv.plot
SV_data <- SV_data_avg %>% filter(!is.na(SV3)) %>% mutate( Species = str_replace(Species, " (species in domain Eukaryota)", "")) #%>% mutate(Species = str_replace(Species, "_", " ")) %>% mutate(tips = Species)
SV_data_avg <- read.csv("/Users/juliamaja/Desktop/SV/SV_data_avg.csv")
SV_data_avg <- SV_data %>% group_by(Species)
SV_data_avg <- SV_data_avg %>% mutate(Species = as.character(Species), SV = as.numeric(SV))
SV_data_avg <- read.csv("/Users/juliamaja/Desktop/SV/SV_data_avg.csv")
# SV presence/ absence
SV_data <- SV_data_avg
SV_data <- SV_data_avg %>% filter(!is.na(SV3)) %>% mutate( Species = str_replace(Species, " (species in domain Eukaryota)", "")) #%>% mutate(Species = str_replace(Species, "_", " ")) %>% mutate(tips = Species)
SV_data <- SV_data_avg %>% filter(!is.na(SV3)) %>% mutate( Species = str_replace(Species, " (species in domain Eukaryota)", "")) %>% mutate(Species = str_replace(Species, " ", "_")) %>% mutate(tips = Species)
SV_data <- SV_data_avg %>% filter(!is.na(SV3)) %>% mutate( Species = str_replace(Species, "Oncorhynchus_mykiss (species in domain Eukaryota)", "Oncorhynchus_mykiss")) #%>% mutate(Species = str_replace(Species, " ", "_")) %>% mutate(tips = Species)
SV_data <- SV_data_avg %>% filter(!is.na(SV3)) %>% mutate( Species = str_replace(Species, "(species in domain Eukaryota)", "")) #%>% mutate(Species = str_replace(Species, " ", "_")) %>% mutate(tips = Species)
SV_data <- SV_data_avg %>% filter(!is.na(SV3)) %>% mutate( Species = str_replace(Species, "(species in domain Eukaryota)", "")) %>% mutate(Species = str_replace(Species, " ", "_")) %>% mutate(tips = Species)
tr <- tol_induced_subtree(ott_ids = SV_data$ott_id[SV_data$flags %in% c("sibling_higher", "")], label_format = "id")
tr <- multi2di(tr)
tr$tip.label <- SV_data$tips[match(tr$tip.label, paste("ott", SV_data$ott_id, sep = ""))]
ggtree(tr, layout = "circular") + geom_tiplab(color = "black", size = 1.5)
sv.plot <- ggtree(tr, layout = "circular") %<+% SV_data[, c("tips", "SV3", "presence", "genome.assembly")]
sv.plot <- sv.plot + geom_tile(data = sv.plot$data[1:length(tr$tip.label),], aes(y=y, x=x, fill = SV3), inherit.aes = FALSE, color = "transparent") + scale_fill_gradient(name = "SV complexiity", low = "tomato", high = "palegreen", na.value = NA)
#new_scale_color() + geom_tile(data = sv.plot$data[1:length(tr$tip.label),], aes(y=y, x=x, fill = presence), inherit.aes = FALSE, color = "transparent") + scale_fill_manual(values = sv_palette)
sv.plot <- sv.plot + geom_tiplab(hjust = -0.2, size = 1.5)
sv.plot
SV_data <- SV_data_avg %>% filter(!is.na(SV3)) #%>% mutate( Species = str_replace(Species, "(species in domain Eukaryota)", "")) %>% mutate(Species = str_replace(Species, " ", "_")) %>% mutate(tips = Species)
tr <- tol_induced_subtree(ott_ids = SV_data$ott_id[SV_data$flags %in% c("sibling_higher", "")], label_format = "id")
tr <- multi2di(tr)
tr$tip.label <- SV_data$tips[match(tr$tip.label, paste("ott", SV_data$ott_id, sep = ""))]
ggtree(tr, layout = "circular") + geom_tiplab(color = "black", size = 1.5)
sv.plot <- ggtree(tr, layout = "circular") %<+% SV_data[, c("tips", "SV3", "presence", "genome.assembly")]
sv.plot <- sv.plot + geom_tile(data = sv.plot$data[1:length(tr$tip.label),], aes(y=y, x=x, fill = SV3), inherit.aes = FALSE, color = "transparent") + scale_fill_gradient(name = "SV complexiity", low = "tomato", high = "palegreen", na.value = NA)
#new_scale_color() + geom_tile(data = sv.plot$data[1:length(tr$tip.label),], aes(y=y, x=x, fill = presence), inherit.aes = FALSE, color = "transparent") + scale_fill_manual(values = sv_palette)
sv.plot <- sv.plot + geom_tiplab(hjust = -0.2, size = 1.5)
sv.plot
is.na(tr$tip.label)
tr <- tol_induced_subtree(ott_ids = SV_data$ott_id[SV_data$flags %in% c("sibling_higher", "")], label_format = "id")
is.na(tr$tip.label)
tr <- multi2di(tr)
is.na(tr$tip.label)
tr$tip.label <- SV_data$tips[match(tr$tip.label, paste("ott", SV_data$ott_id, sep = ""))]
which(is.na(tr$tip.label))
tr <- tol_induced_subtree(ott_ids = SV_data$ott_id[SV_data$flags %in% c("sibling_higher", "")], label_format = "id")
tr
tr[,1,285]
tr$tip.label[1,285]
tr$tip.label[,285]
tr$tip.label[285]
SV_data <- SV_data_avg %>% filter(!is.na(SV3)) %>% mutate( Species = str_replace(Species, "(species in domain Eukaryota)", "")) %>% mutate(Species = str_replace(Species, "_", "")) %>% mutate(tips = Species)
tr <- tol_induced_subtree(ott_ids = SV_data$ott_id[SV_data$flags %in% c("sibling_higher", "")], label_format = "id")
tr <- multi2di(tr)
tr$tip.label <- SV_data$tips[match(tr$tip.label, paste("ott", SV_data$ott_id, sep = ""))]
ggtree(tr, layout = "circular") + geom_tiplab(color = "black", size = 1.5)
sv.plot <- ggtree(tr, layout = "circular") %<+% SV_data[, c("tips", "SV3", "presence", "genome.assembly")]
sv.plot <- sv.plot + geom_tile(data = sv.plot$data[1:length(tr$tip.label),], aes(y=y, x=x, fill = SV3), inherit.aes = FALSE, color = "transparent") + scale_fill_gradient(name = "SV complexiity", low = "tomato", high = "palegreen", na.value = NA)
#new_scale_color() + geom_tile(data = sv.plot$data[1:length(tr$tip.label),], aes(y=y, x=x, fill = presence), inherit.aes = FALSE, color = "transparent") + scale_fill_manual(values = sv_palette)
sv.plot <- sv.plot + geom_tiplab(hjust = -0.2, size = 1.5)
sv.plot
tr$tip.label[285]
tr <- tol_induced_subtree(ott_ids = SV_data$ott_id[SV_data$flags %in% c("sibling_higher", "")], label_format = "id")
tr$tip.label[285]
tr <- multi2di(tr)
tr$tip.label[285]
tr$tip.label[286]
tr$tip.label
SV_data$ott_id[SV_data$flags %in% c("sibling_higher", "")]
SV_data <- SV_data_avg %>% filter(!is.na(SV3)) %>% mutate( Species = str_replace(Species, "(species in domain Eukaryota)", "")) %>% mutate(Species = str_replace(Species, "_", "")) %>% mutate(tips = Species)
tr <- tol_induced_subtree(ott_ids = SV_data$ott_id[SV_data$flags %in% c("sibling_higher", "")], label_format = "id")
tr <- multi2di(tr)
tr$tip.label <- SV_data$tips[match(tr$tip.label, paste("ott", SV_data$ott_id, sep = ""))] %>% remove(is.na(SV_data$tips))
SV_data <- SV_data_avg %>% filter(!is.na(SV3)) %>% mutate( Species = str_replace(Species, "(species in domain Eukaryota)", "")) %>% mutate(Species = str_replace(Species, "_", "")) %>% mutate(tips = Species)
tr <- tol_induced_subtree(ott_ids = SV_data$ott_id[SV_data$flags %in% c("sibling_higher", "")], label_format = "id")
tr <- multi2di(tr)
tr$tip.label <- SV_data$tips[match(tr$tip.label, paste("ott", SV_data$ott_id, sep = ""))] %>% mutate(remove(is.na(SV_data$tips)))
SV_data <- SV_data_avg %>% filter(!is.na(SV3)) %>% mutate( Species = str_replace(Species, "(species in domain Eukaryota)", "")) %>% mutate(Species = str_replace(Species, "_", "")) %>% mutate(tips = Species)
tr <- tol_induced_subtree(ott_ids = SV_data$ott_id[SV_data$flags %in% c("sibling_higher", "")], label_format = "id")
tr <- multi2di(tr)
tr$tip.label <- !is.na(SV_data$tips[match(tr$tip.label, paste("ott", SV_data$ott_id, sep = ""))] %>% remove(is.na(SV_data$tips)))
SV_data <- SV_data_avg %>% filter(!is.na(SV3)) %>% mutate( Species = str_replace(Species, "(species in domain Eukaryota)", "")) %>% mutate(Species = str_replace(Species, "_", "")) %>% mutate(tips = Species)
tr <- tol_induced_subtree(ott_ids = SV_data$ott_id[SV_data$flags %in% c("sibling_higher", "")], label_format = "id")
tr <- multi2di(tr)
tr$tip.label <- !is.na(SV_data$tips[match(tr$tip.label, paste("ott", SV_data$ott_id, sep = ""))])
ggtree(tr, layout = "circular") + geom_tiplab(color = "black", size = 1.5)
sv.plot <- ggtree(tr, layout = "circular") %<+% SV_data[, c("tips", "SV3", "presence", "genome.assembly")]
sv.plot <- sv.plot + geom_tile(data = sv.plot$data[1:length(tr$tip.label),], aes(y=y, x=x, fill = SV3), inherit.aes = FALSE, color = "transparent") + scale_fill_gradient(name = "SV complexiity", low = "tomato", high = "palegreen", na.value = NA)
#new_scale_color() + geom_tile(data = sv.plot$data[1:length(tr$tip.label),], aes(y=y, x=x, fill = presence), inherit.aes = FALSE, color = "transparent") + scale_fill_manual(values = sv_palette)
sv.plot <- sv.plot + geom_tiplab(hjust = -0.2, size = 1.5)
sv.plot
SV_data <- SV_data_avg %>% filter(!is.na(SV3)) %>% mutate( Species = str_replace(Species, "(species in domain Eukaryota)", "")) %>% mutate(Species = str_replace(Species, "_", "")) %>% mutate(tips = Species)
tr <- tol_induced_subtree(ott_ids = SV_data$ott_id[SV_data$flags %in% c("sibling_higher", "")], label_format = "id")
tr <- multi2di(tr)
tr$tip.label <- SV_data$tips[match(tr$tip.label, paste("ott", SV_data$ott_id, sep = ""))]
tr$tip.label <- !is.na(tr$tip.label)
ggtree(tr, layout = "circular") + geom_tiplab(color = "black", size = 1.5)
sv.plot <- ggtree(tr, layout = "circular") %<+% SV_data[, c("tips", "SV3", "presence", "genome.assembly")]
sv.plot <- sv.plot + geom_tile(data = sv.plot$data[1:length(tr$tip.label),], aes(y=y, x=x, fill = SV3), inherit.aes = FALSE, color = "transparent") + scale_fill_gradient(name = "SV complexiity", low = "tomato", high = "palegreen", na.value = NA)
#new_scale_color() + geom_tile(data = sv.plot$data[1:length(tr$tip.label),], aes(y=y, x=x, fill = presence), inherit.aes = FALSE, color = "transparent") + scale_fill_manual(values = sv_palette)
sv.plot <- sv.plot + geom_tiplab(hjust = -0.2, size = 1.5)
sv.plot
SV_data <- SV_data_avg %>% filter(!is.na(SV3)) %>% mutate( Species = str_replace(Species, "(species in domain Eukaryota)", "")) %>% mutate(Species = str_replace(Species, "_", "")) %>% mutate(tips = Species)
tr <- tol_induced_subtree(ott_ids = SV_data$ott_id[SV_data$flags %in% c("sibling_higher", "")], label_format = "id")
tr <- multi2di(tr)
tr$tip.label <- SV_data$tips[match(tr$tip.label, paste("ott", SV_data$ott_id, sep = ""))]
ggtree(tr, layout = "circular") + geom_tiplab(color = "black", size = 1.5)
sv.plot <- ggtree(tr, layout = "circular") %<+% SV_data[, c("tips", "SV3", "presence", "genome.assembly")]
sv.plot <- sv.plot + geom_tile(data = sv.plot$data[1:length(tr$tip.label),], aes(y=y, x=x, fill = SV3), inherit.aes = FALSE, color = "transparent") + scale_fill_gradient(name = "SV complexiity", low = "tomato", high = "palegreen", na.value = NA)
#new_scale_color() + geom_tile(data = sv.plot$data[1:length(tr$tip.label),], aes(y=y, x=x, fill = presence), inherit.aes = FALSE, color = "transparent") + scale_fill_manual(values = sv_palette)
sv.plot <- sv.plot + geom_tiplab(hjust = -0.2, size = 1.5)
sv.plot
SV_data <- SV_data_avg %>% filter(!is.na(SV3)) %>% mutate( Species = str_replace(Species, "(species in domain Eukaryota)", "")) %>% mutate(Species = str_replace(Species, "_", "")) %>% mutate(tips = Species)
tr <- tol_induced_subtree(ott_ids = SV_data$ott_id[SV_data$flags %in% c("sibling_higher", "")], label_format = "id")
tr <- multi2di(tr)
tr$tip.label <- SV_data$tips[match(tr$tip.label, paste("ott", SV_data$ott_id, sep = ""))]
tr$tip.label <- !tr$tip.label[285]
SV_data <- SV_data_avg %>% filter(!is.na(SV3)) %>% mutate( Species = str_replace(Species, "(species in domain Eukaryota)", "")) %>% mutate(Species = str_replace(Species, "_", "")) %>% mutate(tips = Species)
tr <- tol_induced_subtree(ott_ids = SV_data$ott_id[SV_data$flags %in% c("sibling_higher", "")], label_format = "id")
tr <- multi2di(tr)
tr$tip.label <- SV_data$tips[match(tr$tip.label, paste("ott", SV_data$ott_id, sep = ""))]
tr$tip.label <- !(tr$tip.label[285])
SV_data_avg <- read.csv("/Users/juliamaja/Desktop/SV/SV_data_avg.csv")
SV_data <- SV_data_avg %>% filter(!is.na(SV3)) %>% mutate( Species = str_replace(Species, "(species in domain Eukaryota)", "")) %>% mutate(Species = str_replace(Species, "_", "")) %>% mutate(tips = Species)
tr <- tol_induced_subtree(ott_ids = SV_data$ott_id[SV_data$flags %in% c("sibling_higher", "")], label_format = "id")
tr <- multi2di(tr)
tr$tip.label <- SV_data$tips[match(tr$tip.label, paste("ott", SV_data$ott_id, sep = ""))]
ggtree(tr, layout = "circular") + geom_tiplab(color = "black", size = 1.5)
sv.plot <- ggtree(tr, layout = "circular") %<+% SV_data[, c("tips", "SV3", "presence", "genome.assembly")]
sv.plot <- sv.plot + geom_tile(data = sv.plot$data[1:length(tr$tip.label),], aes(y=y, x=x, fill = SV3), inherit.aes = FALSE, color = "transparent") + scale_fill_gradient(name = "SV complexiity", low = "tomato", high = "palegreen", na.value = NA)
#new_scale_color() + geom_tile(data = sv.plot$data[1:length(tr$tip.label),], aes(y=y, x=x, fill = presence), inherit.aes = FALSE, color = "transparent") + scale_fill_manual(values = sv_palette)
sv.plot <- sv.plot + geom_tiplab(hjust = -0.2, size = 1.5)
sv.plot
SV_data <- SV_data_avg %>% filter(!is.na(SV3)) #%>% mutate( Species = str_replace(Species, "(species in domain Eukaryota)", "")) %>% mutate(Species = str_replace(Species, "_", "")) %>% mutate(tips = Species)
tr <- tol_induced_subtree(ott_ids = SV_data$ott_id[SV_data$flags %in% c("sibling_higher", "")], label_format = "id")
tr <- multi2di(tr)
tr$tip.label <- SV_data$tips[match(tr$tip.label, paste("ott", SV_data$ott_id, sep = ""))]
ggtree(tr, layout = "circular") + geom_tiplab(color = "black", size = 1.5)
sv.plot <- ggtree(tr, layout = "circular") %<+% SV_data[, c("tips", "SV3", "presence", "genome.assembly")]
sv.plot <- sv.plot + geom_tile(data = sv.plot$data[1:length(tr$tip.label),], aes(y=y, x=x, fill = SV3), inherit.aes = FALSE, color = "transparent") + scale_fill_gradient(name = "SV complexiity", low = "tomato", high = "palegreen", na.value = NA)
#new_scale_color() + geom_tile(data = sv.plot$data[1:length(tr$tip.label),], aes(y=y, x=x, fill = presence), inherit.aes = FALSE, color = "transparent") + scale_fill_manual(values = sv_palette)
sv.plot <- sv.plot + geom_tiplab(hjust = -0.2, size = 1.5)
sv.plot
SV_data <- SV_data_avg
tr <- tol_induced_subtree(ott_ids = SV_data$ott_id[SV_data$flags %in% c("sibling_higher", "")], label_format = "id")
tr <- multi2di(tr)
tr$tip.label <- SV_data$tips[match(tr$tip.label, paste("ott", SV_data$ott_id, sep = ""))]
ggtree(tr, layout = "circular") + geom_tiplab(color = "black", size = 1.5)
sv_palette <- c("oldlace", "#FEEBE2", "#FBB4B9", "#F768A1", "#C51B8A", "#7A0177", "slateblue")
sv.plot <- ggtree(tr, layout = "circular") %<+% SV_data[, c("tips", "presence", "genome.assembly")]
sv.plot <- sv.plot + geom_tile(data = sv.plot$data[1:length(tr$tip.label),], aes(y=y, x=x, fill = presence), inherit.aes = FALSE, color = "transparent") + scale_fill_brewer(palette = "RdPu")
#sv.plot <- sv.plot + geom_tile(data = sv.plot$data[1:length(tr$tip.label),], aes(y=y, x=x+15, fill = genome.assembly), inherit.aes = FALSE, color = "transparent") + scale_fill_manual(values = sv_palette)
sv.plot <- sv.plot + geom_tiplab(hjust = -0.2, size = 1.5)
sv.plot
SV_data_avg <- read.csv("/Users/juliamaja/Desktop/SV/SV_data_avg.csv")
SV_data <- SV_data_avg %>% filter(!is.na(SV3)) #%>% mutate( Species = str_replace(Species, "(species in domain Eukaryota)", "")) %>% mutate(Species = str_replace(Species, "_", "")) %>% mutate(tips = Species)
tr <- tol_induced_subtree(ott_ids = SV_data$ott_id[SV_data$flags %in% c("sibling_higher", "")], label_format = "id")
tr <- multi2di(tr)
tr$tip.label <- SV_data$tips[match(tr$tip.label, paste("ott", SV_data$ott_id, sep = ""))]
ggtree(tr, layout = "circular") + geom_tiplab(color = "black", size = 1.5)
sv.plot <- ggtree(tr, layout = "circular") %<+% SV_data[, c("tips", "SV3", "presence", "genome.assembly")]
sv.plot <- sv.plot + geom_tile(data = sv.plot$data[1:length(tr$tip.label),], aes(y=y, x=x, fill = SV3), inherit.aes = FALSE, color = "transparent") + scale_fill_gradient(name = "SV complexiity", low = "tomato", high = "palegreen", na.value = NA)
#new_scale_color() + geom_tile(data = sv.plot$data[1:length(tr$tip.label),], aes(y=y, x=x, fill = presence), inherit.aes = FALSE, color = "transparent") + scale_fill_manual(values = sv_palette)
sv.plot <- sv.plot + geom_tiplab(hjust = -0.2, size = 1.5)
sv.plot
tr <- tol_induced_subtree(ott_ids = SV_data$ott_id[SV_data$flags %in% c("sibling_higher", "")], label_format = "id")
tr$tips[285]
tr$tip.label[285]
SV_data$ott_id[SV_data$flags %in% c("sibling_higher", "")]
ott_ids = SV_data$ott_id[SV_data$flags %in% c("sibling_higher", "")]
ott_ids[285]
file_name <- "/Users/juliamaja/Desktop/SV/plots/sv_complexity.svg"
ggsave(file_name, sv.plot, device = "svg")
# tree building for SV complexity:
sv_palette <- c("black", "transparent")
SV_data <- SV_data_avg %>% filter(!is.na(SV3)) #%>% mutate( Species = str_replace(Species, "(species in domain Eukaryota)", "")) %>% mutate(Species = str_replace(Species, "_", "")) %>% mutate(tips = Species)
tr <- tol_induced_subtree(ott_ids = SV_data$ott_id[SV_data$flags %in% c("sibling_higher", "")], label_format = "id")
tr <- multi2di(tr)
tr$tip.label <- SV_data$tips[match(tr$tip.label, paste("ott", SV_data$ott_id, sep = ""))]
ggtree(tr, layout = "circular") + geom_tiplab(color = "black", size = 1.5)
sv.plot <- ggtree(tr, layout = "circular") %<+% SV_data[, c("tips", "SV3", "presence", "genome.assembly")]
sv.plot <- sv.plot + geom_tile(data = sv.plot$data[1:length(tr$tip.label),], aes(y=y, x=x, fill = SV3), inherit.aes = FALSE, color = "transparent") + scale_fill_gradient(name = "SV complexiity", low = "tomato", high = "palegreen", na.value = NA)
#new_scale_color() + geom_tile(data = sv.plot$data[1:length(tr$tip.label),], aes(y=y, x=x, fill = presence), inherit.aes = FALSE, color = "transparent") + scale_fill_manual(values = sv_palette)
sv.plot <- sv.plot + geom_tiplab(hjust = -0.2, size = 1.5)
sv.plot
SV_data <- SV_data_avg %>% filter(!is.na(SV3)) %>% mutate( Species = str_replace(Species, "(species in domain Eukaryota)", "")) %>% mutate(Species = str_replace(Species, "_", "")) %>% mutate(tips = Species)
tr <- tol_induced_subtree(ott_ids = SV_data$ott_id[SV_data$flags %in% c("sibling_higher", "")], label_format = "id")
tr <- multi2di(tr)
tr$tip.label <- SV_data$tips[match(tr$tip.label, paste("ott", SV_data$ott_id, sep = ""))]
ggtree(tr, layout = "circular") + geom_tiplab(color = "black", size = 1.5)
sv.plot <- ggtree(tr, layout = "circular") %<+% SV_data[, c("tips", "SV3", "presence", "genome.assembly")]
sv.plot <- sv.plot + geom_tile(data = sv.plot$data[1:length(tr$tip.label),], aes(y=y, x=x, fill = SV3), inherit.aes = FALSE, color = "transparent") + scale_fill_gradient(name = "SV complexiity", low = "tomato", high = "palegreen", na.value = NA)
#new_scale_color() + geom_tile(data = sv.plot$data[1:length(tr$tip.label),], aes(y=y, x=x, fill = presence), inherit.aes = FALSE, color = "transparent") + scale_fill_manual(values = sv_palette)
sv.plot <- sv.plot + geom_tiplab(hjust = -0.2, size = 1.5)
sv.plot
file_name <- "/Users/juliamaja/Desktop/SV/plots/sv_complexity.svg"
ggsave(file_name, sv.plot, device = "svg")
lik.anc <- as.data.frame(rbind(model_results$tip.states, model_results$states))
#for max_crep cath/crep makes more sense, for max_dinoc cathemeral makes more sense
colnames(lik.anc) <- c("absent", "present")
#colnames(lik.anc) <- c("cathemeral", "diurnal", "nocturnal")
phylo_tree <- model_results$phy
#associate each of these species and their trait states with its node
lik.anc$node <- c(1:length(phylo_tree$tip.label), (length(phylo_tree$tip.label) + 1):(phylo_tree$Nnode + length(phylo_tree$tip.label)))
#plot the ancestral reconstruction, displaying each of the three trait states (cathemeral, diurnal, nocturnal)
ancestral_plot <- ggtree(phylo_tree, layout = "circular") %<+% lik.anc + aes(color = present) + geom_tippoint(aes(color = present), shape = 16, size = 1.5) + scale_color_gradient(low = "tomato", high = "palegreen")  + geom_tiplab(color = "black", size = 1.5, offset = 0.5) + geom_tippoint(aes(color = present), shape = 16, size = 1.5)
#ancestral_plot <- ancestral_plot + geom_tiplab(hjust = -0.2, size = 1.5)
ancestral_plot
lik.anc <- as.data.frame(rbind(model_results$tip.states, model_results$states))
#for max_crep cath/crep makes more sense, for max_dinoc cathemeral makes more sense
colnames(lik.anc) <- c("absent", "present")
#colnames(lik.anc) <- c("cathemeral", "diurnal", "nocturnal")
phylo_tree <- model_results$phy
#associate each of these species and their trait states with its node
lik.anc$node <- c(1:length(phylo_tree$tip.label), (length(phylo_tree$tip.label) + 1):(phylo_tree$Nnode + length(phylo_tree$tip.label)))
#plot the ancestral reconstruction, displaying each of the three trait states (cathemeral, diurnal, nocturnal)
ancestral_plot <- ggtree(phylo_tree, layout = "circular") %<+% lik.anc + aes(color = present) + geom_tippoint(aes(color = present), shape = 16, size = 1.5) + scale_color_gradient(low = "tomato", high = "darkolivegreen4")  + geom_tiplab(color = "black", size = 1.5, offset = 0.5) + geom_tippoint(aes(color = present), shape = 16, size = 1.5)
#ancestral_plot <- ancestral_plot + geom_tiplab(hjust = -0.2, size = 1.5)
ancestral_plot
#from the model results file, tip states describes the trait states at the tips, states describes the trait states at the nodes
lik.anc <- as.data.frame(rbind(model_results$tip.states, model_results$states))
#for max_crep cath/crep makes more sense, for max_dinoc cathemeral makes more sense
colnames(lik.anc) <- c("absent", "present")
#colnames(lik.anc) <- c("cathemeral", "diurnal", "nocturnal")
phylo_tree <- model_results$phy
#associate each of these species and their trait states with its node
lik.anc$node <- c(1:length(phylo_tree$tip.label), (length(phylo_tree$tip.label) + 1):(phylo_tree$Nnode + length(phylo_tree$tip.label)))
#plot the ancestral reconstruction, displaying each of the three trait states (cathemeral, diurnal, nocturnal)
ancestral_plot <- ggtree(phylo_tree, layout = "circular") %<+% lik.anc + aes(color = present) + geom_tippoint(aes(color = present), shape = 16, size = 1.5) + scale_color_gradient(name = "SV presence", low = "darkred", high = "darkolivegreen4")  + geom_tiplab(color = "black", size = 1.5, offset = 0.5) + geom_tippoint(aes(color = present), shape = 16, size = 1.5)
#ancestral_plot <- ancestral_plot + geom_tiplab(hjust = -0.2, size = 1.5)
ancestral_plot
lik.anc <- as.data.frame(rbind(model_results$tip.states, model_results$states))
#for max_crep cath/crep makes more sense, for max_dinoc cathemeral makes more sense
colnames(lik.anc) <- c("absent", "present")
#colnames(lik.anc) <- c("cathemeral", "diurnal", "nocturnal")
phylo_tree <- model_results$phy
#associate each of these species and their trait states with its node
lik.anc$node <- c(1:length(phylo_tree$tip.label), (length(phylo_tree$tip.label) + 1):(phylo_tree$Nnode + length(phylo_tree$tip.label)))
#plot the ancestral reconstruction, displaying each of the three trait states (cathemeral, diurnal, nocturnal)
ancestral_plot <- ggtree(phylo_tree, layout = "circular") %<+% lik.anc + aes(color = present) + geom_tippoint(aes(color = present), shape = 16, size = 1.5) + scale_color_gradient(name = "SV presence", low = "deeppink1", high = "darkolivegreen3")  + geom_tiplab(color = "black", size = 1.5, offset = 0.5) + geom_tippoint(aes(color = present), shape = 16, size = 1.5)
#ancestral_plot <- ancestral_plot + geom_tiplab(hjust = -0.2, size = 1.5)
ancestral_plot
#from the model results file, tip states describes the trait states at the tips, states describes the trait states at the nodes
lik.anc <- as.data.frame(rbind(model_results$tip.states, model_results$states))
#for max_crep cath/crep makes more sense, for max_dinoc cathemeral makes more sense
colnames(lik.anc) <- c("absent", "present")
#colnames(lik.anc) <- c("cathemeral", "diurnal", "nocturnal")
phylo_tree <- model_results$phy
#associate each of these species and their trait states with its node
lik.anc$node <- c(1:length(phylo_tree$tip.label), (length(phylo_tree$tip.label) + 1):(phylo_tree$Nnode + length(phylo_tree$tip.label)))
#plot the ancestral reconstruction, displaying each of the three trait states (cathemeral, diurnal, nocturnal)
ancestral_plot <- ggtree(phylo_tree, layout = "circular") %<+% lik.anc + aes(color = present) + geom_tippoint(aes(color = present), shape = 16, size = 1.5) + scale_color_gradient(name = "SV presence", low = "aquamarine", high = "darkolivegreen3")  + geom_tiplab(color = "black", size = 1.5, offset = 0.5) + geom_tippoint(aes(color = present), shape = 16, size = 1.5)
#ancestral_plot <- ancestral_plot + geom_tiplab(hjust = -0.2, size = 1.5)
ancestral_plot
lik.anc <- as.data.frame(rbind(model_results$tip.states, model_results$states))
#for max_crep cath/crep makes more sense, for max_dinoc cathemeral makes more sense
colnames(lik.anc) <- c("absent", "present")
#colnames(lik.anc) <- c("cathemeral", "diurnal", "nocturnal")
phylo_tree <- model_results$phy
#associate each of these species and their trait states with its node
lik.anc$node <- c(1:length(phylo_tree$tip.label), (length(phylo_tree$tip.label) + 1):(phylo_tree$Nnode + length(phylo_tree$tip.label)))
#plot the ancestral reconstruction, displaying each of the three trait states (cathemeral, diurnal, nocturnal)
ancestral_plot <- ggtree(phylo_tree, layout = "circular") %<+% lik.anc + aes(color = present) + geom_tippoint(aes(color = present), shape = 16, size = 1.5) + scale_color_gradient(name = "SV presence", low = "deeppink1", high = "darkolivegreen3")  + geom_tiplab(color = "black", size = 1.5, offset = 0.5) + geom_tippoint(aes(color = present), shape = 16, size = 1.5)
#ancestral_plot <- ancestral_plot + geom_tiplab(hjust = -0.2, size = 1.5)
ancestral_plot
#for max_crep cath/crep makes more sense, for max_dinoc cathemeral makes more sense
colnames(lik.anc) <- c("absent", "present")
#colnames(lik.anc) <- c("cathemeral", "diurnal", "nocturnal")
phylo_tree <- model_results$phy
#associate each of these species and their trait states with its node
lik.anc$node <- c(1:length(phylo_tree$tip.label), (length(phylo_tree$tip.label) + 1):(phylo_tree$Nnode + length(phylo_tree$tip.label)))
#plot the ancestral reconstruction, displaying each of the three trait states (cathemeral, diurnal, nocturnal)
ancestral_plot <- ggtree(phylo_tree, layout = "circular") %<+% lik.anc + aes(color = present) + geom_tippoint(aes(color = present), shape = 16, size = 1.5) + scale_color_distiller(name = "SV presence", palette = "PiYG")  + geom_tiplab(color = "black", size = 1.5, offset = 0.5) + geom_tippoint(aes(color = present), shape = 16, size = 1.5)
#from the model results file, tip states describes the trait states at the tips, states describes the trait states at the nodes
lik.anc <- as.data.frame(rbind(model_results$tip.states, model_results$states))
#for max_crep cath/crep makes more sense, for max_dinoc cathemeral makes more sense
colnames(lik.anc) <- c("absent", "present")
#colnames(lik.anc) <- c("cathemeral", "diurnal", "nocturnal")
phylo_tree <- model_results$phy
#associate each of these species and their trait states with its node
lik.anc$node <- c(1:length(phylo_tree$tip.label), (length(phylo_tree$tip.label) + 1):(phylo_tree$Nnode + length(phylo_tree$tip.label)))
#plot the ancestral reconstruction, displaying each of the three trait states (cathemeral, diurnal, nocturnal)
ancestral_plot <- ggtree(phylo_tree, layout = "circular") %<+% lik.anc + aes(color = present) + geom_tippoint(aes(color = present), shape = 16, size = 1.5) + scale_color_distiller(name = "SV presence", palette = "PiYG", direction = 1)  + geom_tiplab(color = "black", size = 1.5, offset = 0.5) + geom_tippoint(aes(color = present), shape = 16, size = 1.5)
#ancestral_plot <- ancestral_plot + geom_tiplab(hjust = -0.2, size = 1.5)
ancestral_plot
lik.anc <- as.data.frame(rbind(model_results$tip.states, model_results$states))
#for max_crep cath/crep makes more sense, for max_dinoc cathemeral makes more sense
colnames(lik.anc) <- c("absent", "present")
#colnames(lik.anc) <- c("cathemeral", "diurnal", "nocturnal")
phylo_tree <- model_results$phy
#associate each of these species and their trait states with its node
lik.anc$node <- c(1:length(phylo_tree$tip.label), (length(phylo_tree$tip.label) + 1):(phylo_tree$Nnode + length(phylo_tree$tip.label)))
#plot the ancestral reconstruction, displaying each of the three trait states (cathemeral, diurnal, nocturnal)
ancestral_plot <- ggtree(phylo_tree, layout = "circular") %<+% lik.anc + aes(color = present) + geom_tippoint(aes(color = present), shape = 16, size = 1.5) + scale_color_distiller(name = "SV presence", palette = "PRGn", direction = 1)  + geom_tiplab(color = "black", size = 1.5, offset = 0.5) + geom_tippoint(aes(color = present), shape = 16, size = 1.5)
#ancestral_plot <- ancestral_plot + geom_tiplab(hjust = -0.2, size = 1.5)
ancestral_plot
lik.anc <- as.data.frame(rbind(model_results$tip.states, model_results$states))
#for max_crep cath/crep makes more sense, for max_dinoc cathemeral makes more sense
colnames(lik.anc) <- c("absent", "present")
#colnames(lik.anc) <- c("cathemeral", "diurnal", "nocturnal")
phylo_tree <- model_results$phy
#associate each of these species and their trait states with its node
lik.anc$node <- c(1:length(phylo_tree$tip.label), (length(phylo_tree$tip.label) + 1):(phylo_tree$Nnode + length(phylo_tree$tip.label)))
#plot the ancestral reconstruction, displaying each of the three trait states (cathemeral, diurnal, nocturnal)
ancestral_plot <- ggtree(phylo_tree, layout = "circular") %<+% lik.anc + aes(color = present) + geom_tippoint(aes(color = present), shape = 16, size = 1.5) + scale_color_distiller(name = "SV presence", palette = "Spectral", direction = 1)  + geom_tiplab(color = "black", size = 1.5, offset = 0.5) + geom_tippoint(aes(color = present), shape = 16, size = 1.5)
#ancestral_plot <- ancestral_plot + geom_tiplab(hjust = -0.2, size = 1.5)
ancestral_plot
tr <- readRDS("/Users/juliamaja/Desktop/SV/julia_fish_tree.rds")
SV_data_avg <- SV_data_avg[SV_data_avg$tips %in% tr$tip.label,]  %>% filter(!is.na(SV3)) %>% mutate( Species = str_replace(Species, "(species in domain Eukaryota)", "")) %>% mutate(Species = str_replace(Species, "_", "")) %>% mutate(tips = Species)
tr <- keep.tip(tr, tip = SV_data_avg$tips)
ER_model <- corHMM(phy = trpy_n, data = SV_data_avg[, c("tips", "presence")], rate.cat = 1, model = "ER", node.states = "marginal")
SYM_model <- corHMM(phy = trpy_n, data = SV_data_avg[, c("tips", "presence")], rate.cat = 1, model = "SYM", node.states = "marginal")
ARD_model <- corHMM(phy = trpy_n, data = SV_data_avg[, c("tips", "presence")], rate.cat = 1, model = "ARD", node.states = "marginal")
# ARD_model_2HR <- corHMM(phy = trpy_n, data = SV_data_avg[, c("tips", "presence")], rate.cat = 2, model = "ARD", node.states = "marginal")
#"If analyzing a binary or multistate character, the order of root.p is the same order as the traits – e.g., for states 1, 2, 3, a root.p=c(0,1,0) would fix the root to be in state 2"
#since 1 = echo and 2 = no echo we can use the following to set the state at the root to no echo
ER_set_root_present <- corHMM(phy = trpy_n, data = SV_data_avg[, c("tips", "presence")], rate.cat = 1, model = "ER", node.states = "marginal", root.p = c(0, 1)) # (absent, present)
ER_set_root_absent <- corHMM(phy = trpy_n, data = SV_data_avg[, c("tips", "presence")], rate.cat = 1, model = "ER", node.states = "marginal", root.p = c(1, 0)) # (absent, present)
model_results_list <- list(ER_model, SYM_model, ARD_model)
saveRDS(model_results_list, "SV_reconstruction_results.RDS")
# tr <- readRDS("/Users/juliamaja/Downloads/tr_tree_calibrated_fish.rds")
tr <- readRDS("/Users/juliamaja/Desktop/SV/julia_fish_tree.rds")
SV_data_avg <- SV_data_avg[SV_data_avg$tips %in% tr$tip.label,] # %>% filter(!is.na(SV3)) %>% mutate( Species = str_replace(Species, "(species in domain Eukaryota)", "")) %>% mutate(Species = str_replace(Species, "_", "")) %>% mutate(tips = Species)
tr <- keep.tip(tr, tip = SV_data_avg$tips)
ggtree(tr, layout = "circular") + geom_tiplab(size = 1.5)
# tr <- readRDS("/Users/juliamaja/Downloads/tr_tree_calibrated_fish.rds")
tr <- readRDS("/Users/juliamaja/Desktop/SV/julia_fish_tree.rds")
SV_data_avg <- SV_data_avg[SV_data_avg$tips %in% tr$tip.label,] # %>% filter(!is.na(SV3)) %>% mutate( Species = str_replace(Species, "(species in domain Eukaryota)", "")) %>% mutate(Species = str_replace(Species, "_", "")) %>% mutate(tips = Species)
tr <- keep.tip(tr, tip = SV_data_avg$tips)
ggtree(tr, layout = "circular") + geom_tiplab(size = 1.5)
SV_data_avg <- read.csv("/Users/juliamaja/Desktop/SV/SV_data_avg.csv")
# tr <- readRDS("/Users/juliamaja/Downloads/tr_tree_calibrated_fish.rds")
tr <- readRDS("/Users/juliamaja/Desktop/SV/julia_fish_tree.rds")
SV_data_avg <- SV_data_avg[SV_data_avg$tips %in% tr$tip.label,] # %>% filter(!is.na(SV3)) %>% mutate( Species = str_replace(Species, "(species in domain Eukaryota)", "")) %>% mutate(Species = str_replace(Species, "_", "")) %>% mutate(tips = Species)
tr <- keep.tip(tr, tip = SV_data_avg$tips)
ggtree(tr, layout = "circular") + geom_tiplab(size = 1.5)
saveRDS(tr, "/Users/juliamaja/Desktop/SV/fish_time_tree.rds")
# tr <- readRDS("/Users/juliamaja/Downloads/tr_tree_calibrated_fish.rds")
tr <- readRDS("/Users/juliamaja/Desktop/SV/julia_fish_tree.rds")
SV_data_avg <- SV_data_avg[SV_data_avg$tips %in% tr$tip.label,] %>% mutate( Species = str_replace(Species, "(species in domain Eukaryota)", "")) %>% mutate(Species = str_replace(Species, "_", "")) %>% mutate(tips = Species)
tr <- keep.tip(tr, tip = SV_data_avg$tips)
ggtree(tr, layout = "circular") + geom_tiplab(size = 1.5)
SV_data_avg <- read.csv("/Users/juliamaja/Desktop/SV/SV_data_avg.csv")
tr <- readRDS("/Users/juliamaja/Desktop/SV/julia_fish_tree.rds")
SV_data_avg <- SV_data_avg[SV_data_avg$tips %in% tr$tip.label,] #%>% mutate( Species = str_replace(Species, "(species in domain Eukaryota)", "")) %>% mutate(Species = str_replace(Species, "_", "")) %>% mutate(tips = Species)
tr <- keep.tip(tr, tip = SV_data_avg$tips)
ggtree(tr, layout = "circular") + geom_tiplab(size = 1.5)
ER_model <- corHMM(phy = trpy_n, data = SV_data_avg[, c("tips", "presence")], rate.cat = 1, model = "ER", node.states = "marginal")
SYM_model <- corHMM(phy = trpy_n, data = SV_data_avg[, c("tips", "presence")], rate.cat = 1, model = "SYM", node.states = "marginal")
ARD_model <- corHMM(phy = trpy_n, data = SV_data_avg[, c("tips", "presence")], rate.cat = 1, model = "ARD", node.states = "marginal")
# ARD_model_2HR <- corHMM(phy = trpy_n, data = SV_data_avg[, c("tips", "presence")], rate.cat = 2, model = "ARD", node.states = "marginal")
#"If analyzing a binary or multistate character, the order of root.p is the same order as the traits – e.g., for states 1, 2, 3, a root.p=c(0,1,0) would fix the root to be in state 2"
#since 1 = echo and 2 = no echo we can use the following to set the state at the root to no echo
ER_set_root_present <- corHMM(phy = trpy_n, data = SV_data_avg[, c("tips", "presence")], rate.cat = 1, model = "ER", node.states = "marginal", root.p = c(0, 1)) # (absent, present)
ER_set_root_absent <- corHMM(phy = trpy_n, data = SV_data_avg[, c("tips", "presence")], rate.cat = 1, model = "ER", node.states = "marginal", root.p = c(1, 0)) # (absent, present)
model_results_list <- list(ER_model, SYM_model, ARD_model)
saveRDS(model_results_list, "SV_reconstruction_results.RDS")
#currently I have max_clade_crep data for: artio max_crep, artio max_dinoc
#to do: cetacean max_crep, cetacean max_dinoc, artio w/out cetaceans max_crep, artio w/out cetaceans max_dinoc
all_model_results <- readRDS("SV_reconstruction_results.RDS")
#copy and paste first half of filename here (leave out the models)
file_name <- "SV_reconstruction_results_plot"
#separate the results by the model types we want to use (ER, SYM, ARD, bridge_only)
#uncomment the model you want to plot
# model_results <- all_model_results[[1]]
# model_name <- "ER"
# model_results <- all_model_results[[2]]
# model_name <- "SYM"
model_results <- all_model_results[[3]]
model_name <- "ARD"
# model_results <- all_model_results$bridge_only
# model_name <- "bridge_only"
# Section 1: Plotting ancestral reconstruction from corHMM model  --------
#from the model results file, tip states describes the trait states at the tips, states describes the trait states at the nodes
lik.anc <- as.data.frame(rbind(model_results$tip.states, model_results$states))
#for max_crep cath/crep makes more sense, for max_dinoc cathemeral makes more sense
colnames(lik.anc) <- c("absent", "present")
#colnames(lik.anc) <- c("cathemeral", "diurnal", "nocturnal")
phylo_tree <- model_results$phy
#associate each of these species and their trait states with its node
lik.anc$node <- c(1:length(phylo_tree$tip.label), (length(phylo_tree$tip.label) + 1):(phylo_tree$Nnode + length(phylo_tree$tip.label)))
#plot the ancestral reconstruction, displaying each of the three trait states (cathemeral, diurnal, nocturnal)
ancestral_plot <- ggtree(phylo_tree, layout = "circular") %<+% lik.anc + aes(color = present) + geom_tippoint(aes(color = present), shape = 16, size = 1.5) + scale_color_distiller(name = "SV presence", palette = "Spectral", direction = 1)  + geom_tiplab(color = "black", size = 1.5, offset = 0.5) + geom_tippoint(aes(color = present), shape = 16, size = 1.5)
#ancestral_plot <- ancestral_plot + geom_tiplab(hjust = -0.2, size = 1.5)
ancestral_plot
lik.anc <- as.data.frame(rbind(model_results$tip.states, model_results$states))
#for max_crep cath/crep makes more sense, for max_dinoc cathemeral makes more sense
colnames(lik.anc) <- c("absent", "present")
#colnames(lik.anc) <- c("cathemeral", "diurnal", "nocturnal")
phylo_tree <- model_results$phy
#associate each of these species and their trait states with its node
lik.anc$node <- c(1:length(phylo_tree$tip.label), (length(phylo_tree$tip.label) + 1):(phylo_tree$Nnode + length(phylo_tree$tip.label)))
#plot the ancestral reconstruction, displaying each of the three trait states (cathemeral, diurnal, nocturnal)
ancestral_plot <- ggtree(phylo_tree, layout = "circular") %<+% lik.anc + aes(color = present) + geom_tippoint(aes(color = present), shape = 16, size = 1.5) + scale_color_distiller(name = "SV presence", palette = "RdYlGn", direction = 1)  + geom_tiplab(color = "black", size = 1.5, offset = 0.5) + geom_tippoint(aes(color = present), shape = 16, size = 1.5)
#ancestral_plot <- ancestral_plot + geom_tiplab(hjust = -0.2, size = 1.5)
ancestral_plot
ggsave("/Users/juliamaja/Desktop/SV/ARD_reconstruction.svg", ancestral_plot, device = "svg")
sv_palette <- c("black", "transparent")
SV_data <- SV_data_avg %>% filter(!is.na(SV3)) %>% mutate( Species = str_replace(Species, "(species in domain Eukaryota)", "")) %>% mutate(Species = str_replace(Species, "_", "")) %>% mutate(tips = Species)
tr <- tol_induced_subtree(ott_ids = SV_data$ott_id[SV_data$flags %in% c("sibling_higher", "")], label_format = "id")
tr <- multi2di(tr)
tr$tip.label <- SV_data$tips[match(tr$tip.label, paste("ott", SV_data$ott_id, sep = ""))]
ggtree(tr, layout = "circular") + geom_tiplab(color = "black", size = 1.5)
sv.plot <- ggtree(tr, layout = "circular") %<+% SV_data[, c("tips", "SV3", "presence", "genome.assembly")]
sv.plot <- sv.plot + geom_tile(data = sv.plot$data[1:length(tr$tip.label),], aes(y=y, x=x, fill = SV3), inherit.aes = FALSE, color = "transparent") + scale_fill_gradient(name = "SV complexiity", low = "tomato", high = "palegreen", na.value = NA)
#new_scale_color() + geom_tile(data = sv.plot$data[1:length(tr$tip.label),], aes(y=y, x=x, fill = presence), inherit.aes = FALSE, color = "transparent") + scale_fill_manual(values = sv_palette)
sv.plot <- sv.plot + geom_tiplab(hjust = -0.2, size = 1.5)
sv.plot
View(SV_data)
View(tr)
tr$tip.label
tr[["tip.label"]]
View(sp_data)
num_species_total <- sp_data %>% unique(species) %>% count()
count(sp_data$Species %>% unique())
count(sp_data$Species)
num_species_total <- sp_data %>% group(species) %>% count()
num_species_total <- sp_data %>% group_by(species) %>% count()
View(num_species_total)
num_species_searched <- sp_data %>% group_by(species) %>% filter(SV != "" | presence != "") %>% count()
num_species_w_data <- sp_data %>% group_by(species) %>% filter((SV != "" & SV != "no data") | presence != "") %>% count()
num_species_w_data <- sp_data %>% group_by(species) %>% filter(((SV != "" & SV != "no data") | presence != "") & genome.assembly == "y") %>% count()
num_species_w_data_and_genome <- sp_data %>% group_by(species) %>% filter(((SV != "" & SV != "no data") | presence != "") & genome.assembly == "y") %>% count()
num_species_w_data <- sp_data %>% group_by(species) %>% filter((SV != "" & SV != "no data") | presence != "") %>% count()
num_sp_w_genome <- sp_data <- group_by(species) %>% filter(genome != "y")
num_sp_w_genome <- sp_data %>% group_by(species) %>% filter(genome != "y")
num_sp_w_genome <- sp_data %>% group_by(species) %>% filter(genome.assembly != "y")
num_sp_w_genome <- sp_data %>% group_by(species) %>% filter(genome.assembly == "y")
url <- 'https://docs.google.com/spreadsheets/d/1Z2P6dAcoU0-Kh0UqVgIAeongX5IJohuMUKG1PyrNraU/edit?gid=84578656#gid=84578656'
sp_data <- read.csv(text=gsheet2text(url, format='csv'), stringsAsFactors=FALSE) # as of april 17: 667 sp with data, 1183 left to check. the rest are "no data".
trait.data <- sp_data[,c("species", "SV", "order")]
trait.data$tips <- trait.data$species
trait.data$tips <- str_replace(trait.data$species, pattern = " ", replacement = "_")
# resolve spcies names with open tree of life
otol_names <- tnrs_match_names(names = trait.data$species, context_name = "Vertebrates", do_approximate_matching = TRUE)
SV_data_avg <- read.csv("/Users/juliamaja/Desktop/SV/SV_data_avg.csv")
SV_data <- SV_data_avg %>% filter(!is.na(SV3)) %>% mutate( Species = str_replace(Species, "(species in domain Eukaryota)", "")) %>% mutate(Species = str_replace(Species, "_", "")) %>% mutate(tips = Species)
tr <- tol_induced_subtree(ott_ids = SV_data$ott_id[SV_data$flags %in% c("sibling_higher", "")], label_format = "id")
tr <- multi2di(tr)
tr$tip.label <- SV_data$tips[match(tr$tip.label, paste("ott", SV_data$ott_id, sep = ""))]
ggtree(tr, layout = "circular") + geom_tiplab(color = "black", size = 1.5)
sv.plot <- ggtree(tr, layout = "circular") %<+% SV_data[, c("tips", "SV3", "presence", "genome.assembly")]
sv.plot <- sv.plot + geom_tile(data = sv.plot$data[1:length(tr$tip.label),], aes(y=y, x=x, fill = SV3), inherit.aes = FALSE, color = "transparent") + scale_fill_gradient(name = "SV complexiity", low = "tomato", high = "palegreen", na.value = NA)
#new_scale_color() + geom_tile(data = sv.plot$data[1:length(tr$tip.label),], aes(y=y, x=x, fill = presence), inherit.aes = FALSE, color = "transparent") + scale_fill_manual(values = sv_palette)
sv.plot <- sv.plot + geom_tiplab(hjust = -0.2, size = 1.5)
sv.plot
sp_data %>% filter(SV == 0) %>% count()
sp_data %>% filter(presence == "absent") %>% count()
SV_data_avg %>% filter(presence == "absent") %>% count()
SV_data_avg %>% filter(presence == "present") %>% count()
367+118
ARD_model
n = length(tr$tip.label) # size of tree
n_0 = count(SV_data_avg %>% filter(presence == "present")) # num of "presents"
p = n_0/n
lnL_garb = n_0*log(p)+(n-n_0)*log(1-p) # in R, log is the natural logarithm. log base 10 is log10
print(lnL_garb)
2*2-2*(-206.552)
